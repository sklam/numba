Parallel: 6. Serial: 0
test_ascii_flag_add_mul (numba.tests.test_unicode.TestUnicodeInTuple.test_ascii_flag_add_mul) ... ERROR
test_ascii_flag_getitem (numba.tests.test_unicode.TestUnicodeInTuple.test_ascii_flag_getitem) ... ERROR
test_ascii_flag_join (numba.tests.test_unicode.TestUnicodeInTuple.test_ascii_flag_join) ... ERROR
test_ascii_flag_unbox (numba.tests.test_unicode.TestUnicodeInTuple.test_ascii_flag_unbox) ... ok
test_const_unicode_in_hetero_tuple (numba.tests.test_unicode.TestUnicodeInTuple.test_const_unicode_in_hetero_tuple) ... ok
test_const_unicode_in_tuple (numba.tests.test_unicode.TestUnicodeInTuple.test_const_unicode_in_tuple) ... ok

======================================================================
ERROR: test_ascii_flag_add_mul (numba.tests.test_unicode.TestUnicodeInTuple.test_ascii_flag_add_mul)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 704, in __call__
    self.resolve(typeinfer, typeinfer.typevars, fnty=fnty)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
    raise last_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
    failures.raise_error()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: No implementation of function Function(<built-in function add>) found for signature:
 
 >>> add(Literal[str](abc), Literal[str](123))
 
There are 20 candidate implementations:
      - Of which 17 did not match due to:
      Overload of function 'add': File: <numerous>: Line N/A.
        With argument(s): '(unicode_type, unicode_type)':
       No match.
      - Of which 2 did not match due to:
      Operator Overload in function 'add': File: unknown: Line unknown.
        With argument(s): '(unicode_type, unicode_type)':
       No match for registered cases:
        * (int64, int64) -> int64
        * (int64, uint64) -> int64
        * (uint64, int64) -> int64
        * (uint64, uint64) -> uint64
        * (float32, float32) -> float32
        * (float64, float64) -> float64
        * (complex64, complex64) -> complex64
        * (complex128, complex128) -> complex128
           
      - Of which 1 did not match due to:
      Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
        With argument(s): '(unicode_type, unicode_type)':
       Rejected as the implementation raised a specific error:
         TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:
        
        >>> _pick_kind(int32, int32)
        
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
               With argument(s): '(int32, int32)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                      infer.build_constraint()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                      self.constrain_statement(inst)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                      self.typeof_assign(inst)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                      self.typeof_global(inst, inst.target, value)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                      typ = self.resolve_value_type(inst, gvar.value)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                      raise TypingError(msg, loc=inst.loc)
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
       
       During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
       
       
       File "numba/cpython/unicode.py", line 1849:
               def concat_impl(a, b):
                   <source elided>
                   new_length = a._length + b._length
                   new_kind = _pick_kind(a._kind, b._kind)
                   ^
       
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
               constraint(typeinfer)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
               self.resolve(typeinfer, typevars, fnty)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
               sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
               return self.context.resolve_function_type(fnty, pos_args, kw_args)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
               raise last_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
               res = self._resolve_user_function_type(func, args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
               return func.get_call_type(self, args, kws)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
               failures.raise_error()
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
               raise errors.TypingError(self.format())
           numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:
            
            >>> _pick_kind(int32, int32)
            
           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(int32, int32)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                          infer.build_constraint()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                          self.constrain_statement(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                          self.typeof_assign(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                          self.typeof_global(inst, inst.target, value)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                          typ = self.resolve_value_type(inst, gvar.value)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                          raise TypingError(msg, loc=inst.loc)
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
           During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
           The above exception was the direct cause of the following exception:
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
               sig = temp.apply(nolitargs, nolitkws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
               sig = generic(args, kws)
                     ^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
               disp, new_args = self._get_impl(args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
               impl, args = self._build_impl(cache_key, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
               disp_type.get_call_type(self.context, args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
               self.dispatcher.get_call_template(args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
               self.compile(tuple(args))
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
               cres = self._compiler.compile(args, return_type)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
               raise retval
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
               retval = self._compile_core(args, return_type)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
               cres = compiler.compile_extra(self.targetdescr.typing_context,
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
               return pipeline.compile_extra(func)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
               return self._compile_bytecode()
                      ^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
               return self._compile_core()
                      ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
               raise e
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
               pm.run(self.state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
               raise patched_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
               self._runPass(idx, pass_inst, state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
               return func(*args, **kwargs)
                      ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
               mutated |= check(pss.run_pass, internal_state)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
               mangled = func(compiler_state)
                         ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
               typemap, return_type, calltypes, errs = type_inference_stage(
                                                       ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
               errs = infer.propagate(raise_errors=raise_errors)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
               raise errors[0]
           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
           No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:
            
            >>> _pick_kind(int32, int32)
            
           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(int32, int32)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                          infer.build_constraint()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                          self.constrain_statement(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                          self.typeof_assign(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                          self.typeof_global(inst, inst.target, value)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                          typ = self.resolve_value_type(inst, gvar.value)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                          raise TypingError(msg, loc=inst.loc)
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
           During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
           File "numba/cpython/unicode.py", line 1849:
                   def concat_impl(a, b):
                       <source elided>
                       new_length = a._length + b._length
                       new_kind = _pick_kind(a._kind, b._kind)
                       ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_unicode.py (2543)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_unicode.py", line 2549, in test_ascii_flag_add_mul
    self.assertEqual(f(), (1, 0, 0, 1, 0))
                     ^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 468, in _compile_for_args
    error_rewrite(e, 'typing')
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 407, in error_rewrite
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 420, in _compile_for_args
    return_val = self.compile(tuple(argtypes))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
    cres = self._compiler.compile(args, return_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
    raise retval
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
    retval = self._compile_core(args, return_type)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
    cres = compiler.compile_extra(self.targetdescr.typing_context,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
    typemap, return_type, calltypes, errs = type_inference_stage(
                                            ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
    errs = infer.propagate(raise_errors=raise_errors)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
    raise errors[0]
numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
No implementation of function Function(<built-in function add>) found for signature:
 
 >>> add(Literal[str](abc), Literal[str](123))
 
There are 20 candidate implementations:
      - Of which 17 did not match due to:
      Overload of function 'add': File: <numerous>: Line N/A.
        With argument(s): '(unicode_type, unicode_type)':
       No match.
      - Of which 2 did not match due to:
      Operator Overload in function 'add': File: unknown: Line unknown.
        With argument(s): '(unicode_type, unicode_type)':
       No match for registered cases:
        * (int64, int64) -> int64
        * (int64, uint64) -> int64
        * (uint64, int64) -> int64
        * (uint64, uint64) -> uint64
        * (float32, float32) -> float32
        * (float64, float64) -> float64
        * (complex64, complex64) -> complex64
        * (complex128, complex128) -> complex128
           
      - Of which 1 did not match due to:
      Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
        With argument(s): '(unicode_type, unicode_type)':
       Rejected as the implementation raised a specific error:
         TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:
        
        >>> _pick_kind(int32, int32)
        
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
               With argument(s): '(int32, int32)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                      infer.build_constraint()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                      self.constrain_statement(inst)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                      self.typeof_assign(inst)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                      self.typeof_global(inst, inst.target, value)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                      typ = self.resolve_value_type(inst, gvar.value)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                      raise TypingError(msg, loc=inst.loc)
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
       
       During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
       
       
       File "numba/cpython/unicode.py", line 1849:
               def concat_impl(a, b):
                   <source elided>
                   new_length = a._length + b._length
                   new_kind = _pick_kind(a._kind, b._kind)
                   ^
       
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
               constraint(typeinfer)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
               self.resolve(typeinfer, typevars, fnty)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
               sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
               return self.context.resolve_function_type(fnty, pos_args, kw_args)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
               raise last_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
               res = self._resolve_user_function_type(func, args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
               return func.get_call_type(self, args, kws)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
               failures.raise_error()
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
               raise errors.TypingError(self.format())
           numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:
            
            >>> _pick_kind(int32, int32)
            
           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(int32, int32)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                          infer.build_constraint()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                          self.constrain_statement(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                          self.typeof_assign(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                          self.typeof_global(inst, inst.target, value)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                          typ = self.resolve_value_type(inst, gvar.value)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                          raise TypingError(msg, loc=inst.loc)
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
           During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
           The above exception was the direct cause of the following exception:
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
               sig = temp.apply(nolitargs, nolitkws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
               sig = generic(args, kws)
                     ^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
               disp, new_args = self._get_impl(args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
               impl, args = self._build_impl(cache_key, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
               disp_type.get_call_type(self.context, args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
               self.dispatcher.get_call_template(args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
               self.compile(tuple(args))
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
               cres = self._compiler.compile(args, return_type)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
               raise retval
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
               retval = self._compile_core(args, return_type)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
               cres = compiler.compile_extra(self.targetdescr.typing_context,
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
               return pipeline.compile_extra(func)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
               return self._compile_bytecode()
                      ^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
               return self._compile_core()
                      ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
               raise e
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
               pm.run(self.state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
               raise patched_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
               self._runPass(idx, pass_inst, state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
               return func(*args, **kwargs)
                      ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
               mutated |= check(pss.run_pass, internal_state)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
               mangled = func(compiler_state)
                         ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
               typemap, return_type, calltypes, errs = type_inference_stage(
                                                       ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
               errs = infer.propagate(raise_errors=raise_errors)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
               raise errors[0]
           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
           No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:
            
            >>> _pick_kind(int32, int32)
            
           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(int32, int32)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                          infer.build_constraint()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                          self.constrain_statement(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                          self.typeof_assign(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                          self.typeof_global(inst, inst.target, value)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                          typ = self.resolve_value_type(inst, gvar.value)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                          raise TypingError(msg, loc=inst.loc)
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
           During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
           File "numba/cpython/unicode.py", line 1849:
                   def concat_impl(a, b):
                       <source elided>
                       new_length = a._length + b._length
                       new_kind = _pick_kind(a._kind, b._kind)
                       ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_unicode.py (2543)

File "numba/tests/test_unicode.py", line 2543:
        def f():
            <source elided>
            s4 = '大处着眼，小处着手。'
            return ((s1 + s2)._is_ascii,
            ^


======================================================================
ERROR: test_ascii_flag_getitem (numba.tests.test_unicode.TestUnicodeInTuple.test_ascii_flag_getitem)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
    raise last_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
    failures.raise_error()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: No implementation of function Function(<function _empty_string at 0x7fbeb5d004a0>) found for signature:
 
 >>> _empty_string(int64, Literal[int](1), bool)
 
There are 2 candidate implementations:
      - Of which 2 did not match due to:
      Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
        With argument(s): '(int64, int64, bool)':
       Rejected as the implementation raised a specific error:
         TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       No implementation of function Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>) found for signature:
        
        >>> _kind_to_byte_width(int64)
        
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
               With argument(s): '(int64)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                      infer.build_constraint()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                      self.constrain_statement(inst)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                      self.typeof_assign(inst)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                      self.typeof_global(inst, inst.target, value)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                      typ = self.resolve_value_type(inst, gvar.value)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                      raise TypingError(msg, loc=inst.loc)
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
       
       During: resolving callee type: Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
       
       
       File "numba/cpython/unicode.py", line 278:
       def _empty_string(kind, length, is_ascii=0):
           char_width = _kind_to_byte_width(kind)
           ^
       
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
               constraint(typeinfer)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
               self.resolve(typeinfer, typevars, fnty)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
               sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
               return self.context.resolve_function_type(fnty, pos_args, kw_args)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
               raise last_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
               res = self._resolve_user_function_type(func, args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
               return func.get_call_type(self, args, kws)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
               failures.raise_error()
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
               raise errors.TypingError(self.format())
           numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>) found for signature:
            
            >>> _kind_to_byte_width(int64)
            
           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(int64)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                          infer.build_constraint()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                          self.constrain_statement(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                          self.typeof_assign(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                          self.typeof_global(inst, inst.target, value)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                          typ = self.resolve_value_type(inst, gvar.value)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                          raise TypingError(msg, loc=inst.loc)
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
           During: resolving callee type: Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
           The above exception was the direct cause of the following exception:
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
               sig = temp.apply(nolitargs, nolitkws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
               sig = generic(args, kws)
                     ^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
               disp, new_args = self._get_impl(args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
               impl, args = self._build_impl(cache_key, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
               disp_type.get_call_type(self.context, args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
               self.dispatcher.get_call_template(args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
               self.compile(tuple(args))
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
               cres = self._compiler.compile(args, return_type)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
               raise retval
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
               retval = self._compile_core(args, return_type)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
               cres = compiler.compile_extra(self.targetdescr.typing_context,
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
               return pipeline.compile_extra(func)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
               return self._compile_bytecode()
                      ^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
               return self._compile_core()
                      ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
               raise e
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
               pm.run(self.state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
               raise patched_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
               self._runPass(idx, pass_inst, state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
               return func(*args, **kwargs)
                      ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
               mutated |= check(pss.run_pass, internal_state)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
               mangled = func(compiler_state)
                         ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
               typemap, return_type, calltypes, errs = type_inference_stage(
                                                       ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
               errs = infer.propagate(raise_errors=raise_errors)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
               raise errors[0]
           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
           No implementation of function Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>) found for signature:
            
            >>> _kind_to_byte_width(int64)
            
           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(int64)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                          infer.build_constraint()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                          self.constrain_statement(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                          self.typeof_assign(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                          self.typeof_global(inst, inst.target, value)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                          typ = self.resolve_value_type(inst, gvar.value)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                          raise TypingError(msg, loc=inst.loc)
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
           During: resolving callee type: Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
           File "numba/cpython/unicode.py", line 278:
           def _empty_string(kind, length, is_ascii=0):
               char_width = _kind_to_byte_width(kind)
               ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

During: resolving callee type: Function(<function _empty_string at 0x7fbeb5d004a0>)
During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1794)


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 481, in __call__
    self.fallback(typeinfer)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 704, in __call__
    self.resolve(typeinfer, typeinfer.typevars, fnty=fnty)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 209, in resolve_function_type
    res = self._resolve_builtin_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 229, in _resolve_builtin_function_type
    res = defn.apply(fixedargs, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
    sig = generic(args, kws)
          ^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
    disp, new_args = self._get_impl(args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
    impl, args = self._build_impl(cache_key, args, kws)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
    disp_type.get_call_type(self.context, args, kws)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
    self.dispatcher.get_call_template(args, kws)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
    self.compile(tuple(args))
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
    cres = self._compiler.compile(args, return_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
    raise retval
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
    retval = self._compile_core(args, return_type)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
    cres = compiler.compile_extra(self.targetdescr.typing_context,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
    typemap, return_type, calltypes, errs = type_inference_stage(
                                            ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
    errs = infer.propagate(raise_errors=raise_errors)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
    raise errors[0]
numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
No implementation of function Function(<function _empty_string at 0x7fbeb5d004a0>) found for signature:
 
 >>> _empty_string(int64, Literal[int](1), bool)
 
There are 2 candidate implementations:
      - Of which 2 did not match due to:
      Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
        With argument(s): '(int64, int64, bool)':
       Rejected as the implementation raised a specific error:
         TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       No implementation of function Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>) found for signature:
        
        >>> _kind_to_byte_width(int64)
        
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
               With argument(s): '(int64)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                      infer.build_constraint()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                      self.constrain_statement(inst)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                      self.typeof_assign(inst)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                      self.typeof_global(inst, inst.target, value)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                      typ = self.resolve_value_type(inst, gvar.value)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                      raise TypingError(msg, loc=inst.loc)
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
       
       During: resolving callee type: Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
       
       
       File "numba/cpython/unicode.py", line 278:
       def _empty_string(kind, length, is_ascii=0):
           char_width = _kind_to_byte_width(kind)
           ^
       
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
               constraint(typeinfer)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
               self.resolve(typeinfer, typevars, fnty)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
               sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
               return self.context.resolve_function_type(fnty, pos_args, kw_args)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
               raise last_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
               res = self._resolve_user_function_type(func, args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
               return func.get_call_type(self, args, kws)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
               failures.raise_error()
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
               raise errors.TypingError(self.format())
           numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>) found for signature:
            
            >>> _kind_to_byte_width(int64)
            
           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(int64)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                          infer.build_constraint()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                          self.constrain_statement(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                          self.typeof_assign(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                          self.typeof_global(inst, inst.target, value)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                          typ = self.resolve_value_type(inst, gvar.value)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                          raise TypingError(msg, loc=inst.loc)
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
           During: resolving callee type: Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
           The above exception was the direct cause of the following exception:
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
               sig = temp.apply(nolitargs, nolitkws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
               sig = generic(args, kws)
                     ^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
               disp, new_args = self._get_impl(args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
               impl, args = self._build_impl(cache_key, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
               disp_type.get_call_type(self.context, args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
               self.dispatcher.get_call_template(args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
               self.compile(tuple(args))
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
               cres = self._compiler.compile(args, return_type)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
               raise retval
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
               retval = self._compile_core(args, return_type)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
               cres = compiler.compile_extra(self.targetdescr.typing_context,
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
               return pipeline.compile_extra(func)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
               return self._compile_bytecode()
                      ^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
               return self._compile_core()
                      ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
               raise e
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
               pm.run(self.state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
               raise patched_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
               self._runPass(idx, pass_inst, state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
               return func(*args, **kwargs)
                      ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
               mutated |= check(pss.run_pass, internal_state)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
               mangled = func(compiler_state)
                         ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
               typemap, return_type, calltypes, errs = type_inference_stage(
                                                       ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
               errs = infer.propagate(raise_errors=raise_errors)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
               raise errors[0]
           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
           No implementation of function Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>) found for signature:
            
            >>> _kind_to_byte_width(int64)
            
           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(int64)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                          infer.build_constraint()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                          self.constrain_statement(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                          self.typeof_assign(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                          self.typeof_global(inst, inst.target, value)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                          typ = self.resolve_value_type(inst, gvar.value)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                          raise TypingError(msg, loc=inst.loc)
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
           During: resolving callee type: Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
           File "numba/cpython/unicode.py", line 278:
           def _empty_string(kind, length, is_ascii=0):
               char_width = _kind_to_byte_width(kind)
               ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

During: resolving callee type: Function(<function _empty_string at 0x7fbeb5d004a0>)
During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1794)


File "numba/cpython/unicode.py", line 1794:
            def getitem_char(s, idx):
                <source elided>
                    is_ascii = _codepoint_is_ascii(cp)
                    ret = _empty_string(kind, 1, is_ascii)
                    ^

During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_unicode.py (2531)
During: typing of static-get-item at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_unicode.py (2531)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_unicode.py", line 2534, in test_ascii_flag_getitem
    self.assertEqual(f(), (1, 1, 0, 0))
                     ^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 468, in _compile_for_args
    error_rewrite(e, 'typing')
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 407, in error_rewrite
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 420, in _compile_for_args
    return_val = self.compile(tuple(argtypes))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
    cres = self._compiler.compile(args, return_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
    raise retval
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
    retval = self._compile_core(args, return_type)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
    cres = compiler.compile_extra(self.targetdescr.typing_context,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
    typemap, return_type, calltypes, errs = type_inference_stage(
                                            ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
    errs = infer.propagate(raise_errors=raise_errors)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
    raise errors[0]
numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
Failed in nopython mode pipeline (step: nopython frontend)
No implementation of function Function(<function _empty_string at 0x7fbeb5d004a0>) found for signature:
 
 >>> _empty_string(int64, Literal[int](1), bool)
 
There are 2 candidate implementations:
      - Of which 2 did not match due to:
      Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
        With argument(s): '(int64, int64, bool)':
       Rejected as the implementation raised a specific error:
         TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       No implementation of function Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>) found for signature:
        
        >>> _kind_to_byte_width(int64)
        
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
               With argument(s): '(int64)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                      infer.build_constraint()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                      self.constrain_statement(inst)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                      self.typeof_assign(inst)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                      self.typeof_global(inst, inst.target, value)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                      typ = self.resolve_value_type(inst, gvar.value)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                      raise TypingError(msg, loc=inst.loc)
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
       
       During: resolving callee type: Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
       
       
       File "numba/cpython/unicode.py", line 278:
       def _empty_string(kind, length, is_ascii=0):
           char_width = _kind_to_byte_width(kind)
           ^
       
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
               constraint(typeinfer)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
               self.resolve(typeinfer, typevars, fnty)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
               sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
               return self.context.resolve_function_type(fnty, pos_args, kw_args)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
               raise last_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
               res = self._resolve_user_function_type(func, args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
               return func.get_call_type(self, args, kws)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
               failures.raise_error()
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
               raise errors.TypingError(self.format())
           numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>) found for signature:
            
            >>> _kind_to_byte_width(int64)
            
           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(int64)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                          infer.build_constraint()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                          self.constrain_statement(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                          self.typeof_assign(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                          self.typeof_global(inst, inst.target, value)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                          typ = self.resolve_value_type(inst, gvar.value)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                          raise TypingError(msg, loc=inst.loc)
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
           During: resolving callee type: Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
           The above exception was the direct cause of the following exception:
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
               sig = temp.apply(nolitargs, nolitkws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
               sig = generic(args, kws)
                     ^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
               disp, new_args = self._get_impl(args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
               impl, args = self._build_impl(cache_key, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
               disp_type.get_call_type(self.context, args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
               self.dispatcher.get_call_template(args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
               self.compile(tuple(args))
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
               cres = self._compiler.compile(args, return_type)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
               raise retval
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
               retval = self._compile_core(args, return_type)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
               cres = compiler.compile_extra(self.targetdescr.typing_context,
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
               return pipeline.compile_extra(func)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
               return self._compile_bytecode()
                      ^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
               return self._compile_core()
                      ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
               raise e
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
               pm.run(self.state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
               raise patched_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
               self._runPass(idx, pass_inst, state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
               return func(*args, **kwargs)
                      ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
               mutated |= check(pss.run_pass, internal_state)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
               mangled = func(compiler_state)
                         ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
               typemap, return_type, calltypes, errs = type_inference_stage(
                                                       ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
               errs = infer.propagate(raise_errors=raise_errors)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
               raise errors[0]
           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
           No implementation of function Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>) found for signature:
            
            >>> _kind_to_byte_width(int64)
            
           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(int64)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                          infer.build_constraint()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                          self.constrain_statement(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                          self.typeof_assign(inst)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                          self.typeof_global(inst, inst.target, value)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                          typ = self.resolve_value_type(inst, gvar.value)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                          raise TypingError(msg, loc=inst.loc)
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
           During: resolving callee type: Function(<function _kind_to_byte_width at 0x7fbeb5d00c20>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
           File "numba/cpython/unicode.py", line 278:
           def _empty_string(kind, length, is_ascii=0):
               char_width = _kind_to_byte_width(kind)
               ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

During: resolving callee type: Function(<function _empty_string at 0x7fbeb5d004a0>)
During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1794)


File "numba/cpython/unicode.py", line 1794:
            def getitem_char(s, idx):
                <source elided>
                    is_ascii = _codepoint_is_ascii(cp)
                    ret = _empty_string(kind, 1, is_ascii)
                    ^

During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_unicode.py (2531)
During: typing of static-get-item at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_unicode.py (2531)

File "numba/tests/test_unicode.py", line 2531:
        def f():
            <source elided>
            s2 = '🐍⚡🐍⚡🐍⚡'
            return (s1[0]._is_ascii, s1[2:]._is_ascii, s2[0]._is_ascii,
            ^


======================================================================
ERROR: test_ascii_flag_join (numba.tests.test_unicode.TestUnicodeInTuple.test_ascii_flag_join)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
    raise last_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 462, in get_call_type
    raise errors.TypingError(nested_msg('literal', literal_e) +
numba.core.errors.TypingError: - Resolution failure for literal arguments:
No implementation of function Function(<function unicode_join at 0x7fbeb5d03420>) found for signature:

 >>> unicode_join(unicode_type, list(unicode_type)<iv=['abc', '123']>)

There are 2 candidate implementations:
      - Of which 1 did not match due to:
      Overload in function 'unicode_join': File: numba/cpython/unicode.py: Line 1484.
        With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
       Rejected as the implementation raised a specific error:
         TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

        >>> join_list(unicode_type, list(unicode_type)<iv=None>)

       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
               With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

               >>> _pick_kind(int32, int32)

              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int32, int32)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                             infer.build_constraint()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                             self.constrain_statement(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                             self.typeof_assign(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                             self.typeof_global(inst, inst.target, value)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                             typ = self.resolve_value_type(inst, gvar.value)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                             raise TypingError(msg, loc=inst.loc)
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

              During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


              File "numba/cpython/unicode.py", line 1465:
              def join_list(sep, parts):
                  <source elided>
                      length += len(p)
                      kind = _pick_kind(kind, p._kind)
                      ^

                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                      self.resolve(typeinfer, typevars, fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

       During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)


       File "numba/cpython/unicode.py", line 1490:
                   def join_list_impl(sep, parts):
                       return join_list(sep, parts)
                       ^

           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
               constraint(typeinfer)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
               self.resolve(typeinfer, typevars, fnty)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
               sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
               return self.context.resolve_function_type(fnty, pos_args, kw_args)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
               raise last_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
               res = self._resolve_user_function_type(func, args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
               return func.get_call_type(self, args, kws)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
               failures.raise_error()
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
               raise errors.TypingError(self.format())
           numba.core.errors.TypingError: No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=None>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           The above exception was the direct cause of the following exception:
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
               sig = temp.apply(nolitargs, nolitkws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
               sig = generic(args, kws)
                     ^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
               disp, new_args = self._get_impl(args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
               impl, args = self._build_impl(cache_key, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
               disp_type.get_call_type(self.context, args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
               self.dispatcher.get_call_template(args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
               self.compile(tuple(args))
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
               cres = self._compiler.compile(args, return_type)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
               raise retval
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
               retval = self._compile_core(args, return_type)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
               cres = compiler.compile_extra(self.targetdescr.typing_context,
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
               return pipeline.compile_extra(func)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
               return self._compile_bytecode()
                      ^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
               return self._compile_core()
                      ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
               raise e
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
               pm.run(self.state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
               raise patched_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
               self._runPass(idx, pass_inst, state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
               return func(*args, **kwargs)
                      ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
               mutated |= check(pss.run_pass, internal_state)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
               mangled = func(compiler_state)
                         ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
               typemap, return_type, calltypes, errs = type_inference_stage(
                                                       ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
               errs = infer.propagate(raise_errors=raise_errors)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
               raise errors[0]
           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
           No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=None>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           File "numba/cpython/unicode.py", line 1490:
                       def join_list_impl(sep, parts):
                           return join_list(sep, parts)
                           ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
      - Of which 1 did not match due to:
      Overload in function 'unicode_join': File: numba/cpython/unicode.py: Line 1484.
        With argument(s): '(unicode_type, list(unicode_type)<iv=['abc', '123']>)':
       Rejected as the implementation raised a specific error:
         TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

        >>> join_list(unicode_type, list(unicode_type)<iv=['abc', '123']>)

       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
               With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

               >>> _pick_kind(int32, int32)

              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int32, int32)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                             infer.build_constraint()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                             self.constrain_statement(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                             self.typeof_assign(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                             self.typeof_global(inst, inst.target, value)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                             typ = self.resolve_value_type(inst, gvar.value)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                             raise TypingError(msg, loc=inst.loc)
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

              During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


              File "numba/cpython/unicode.py", line 1465:
              def join_list(sep, parts):
                  <source elided>
                      length += len(p)
                      kind = _pick_kind(kind, p._kind)
                      ^

                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                      self.resolve(typeinfer, typevars, fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

       During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)


       File "numba/cpython/unicode.py", line 1490:
                   def join_list_impl(sep, parts):
                       return join_list(sep, parts)
                       ^

           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
               constraint(typeinfer)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
               self.resolve(typeinfer, typevars, fnty)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
               sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
               return self.context.resolve_function_type(fnty, pos_args, kw_args)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
               raise last_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
               res = self._resolve_user_function_type(func, args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
               return func.get_call_type(self, args, kws)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
               failures.raise_error()
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
               raise errors.TypingError(self.format())
           numba.core.errors.TypingError: No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=['abc', '123']>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           The above exception was the direct cause of the following exception:
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 303, in get_call_type
               sig = temp.apply(args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
               sig = generic(args, kws)
                     ^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
               disp, new_args = self._get_impl(args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
               impl, args = self._build_impl(cache_key, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
               disp_type.get_call_type(self.context, args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
               self.dispatcher.get_call_template(args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
               self.compile(tuple(args))
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
               cres = self._compiler.compile(args, return_type)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
               raise retval
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
               retval = self._compile_core(args, return_type)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
               cres = compiler.compile_extra(self.targetdescr.typing_context,
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
               return pipeline.compile_extra(func)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
               return self._compile_bytecode()
                      ^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
               return self._compile_core()
                      ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
               raise e
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
               pm.run(self.state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
               raise patched_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
               self._runPass(idx, pass_inst, state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
               return func(*args, **kwargs)
                      ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
               mutated |= check(pss.run_pass, internal_state)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
               mangled = func(compiler_state)
                         ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
               typemap, return_type, calltypes, errs = type_inference_stage(
                                                       ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
               errs = infer.propagate(raise_errors=raise_errors)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
               raise errors[0]
           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
           No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=['abc', '123']>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           File "numba/cpython/unicode.py", line 1490:
                       def join_list_impl(sep, parts):
                           return join_list(sep, parts)
                           ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

- Resolution failure for non-literal arguments:
No implementation of function Function(<function unicode_join at 0x7fbeb5d03420>) found for signature:

 >>> unicode_join(unicode_type, list(unicode_type)<iv=None>)

There are 2 candidate implementations:
      - Of which 2 did not match due to:
      Overload in function 'unicode_join': File: numba/cpython/unicode.py: Line 1484.
        With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
       Rejected as the implementation raised a specific error:
         TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

        >>> join_list(unicode_type, list(unicode_type)<iv=None>)

       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
               With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

               >>> _pick_kind(int32, int32)

              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int32, int32)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                             infer.build_constraint()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                             self.constrain_statement(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                             self.typeof_assign(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                             self.typeof_global(inst, inst.target, value)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                             typ = self.resolve_value_type(inst, gvar.value)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                             raise TypingError(msg, loc=inst.loc)
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

              During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


              File "numba/cpython/unicode.py", line 1465:
              def join_list(sep, parts):
                  <source elided>
                      length += len(p)
                      kind = _pick_kind(kind, p._kind)
                      ^

                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                      self.resolve(typeinfer, typevars, fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

       During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)


       File "numba/cpython/unicode.py", line 1490:
                   def join_list_impl(sep, parts):
                       return join_list(sep, parts)
                       ^

           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
               constraint(typeinfer)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
               self.resolve(typeinfer, typevars, fnty)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
               sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
               return self.context.resolve_function_type(fnty, pos_args, kw_args)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
               raise last_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
               res = self._resolve_user_function_type(func, args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
               return func.get_call_type(self, args, kws)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
               failures.raise_error()
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
               raise errors.TypingError(self.format())
           numba.core.errors.TypingError: No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=None>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           The above exception was the direct cause of the following exception:
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
               sig = temp.apply(nolitargs, nolitkws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
               sig = generic(args, kws)
                     ^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
               disp, new_args = self._get_impl(args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
               impl, args = self._build_impl(cache_key, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
               disp_type.get_call_type(self.context, args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
               self.dispatcher.get_call_template(args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
               self.compile(tuple(args))
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
               cres = self._compiler.compile(args, return_type)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
               raise retval
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
               retval = self._compile_core(args, return_type)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
               cres = compiler.compile_extra(self.targetdescr.typing_context,
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
               return pipeline.compile_extra(func)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
               return self._compile_bytecode()
                      ^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
               return self._compile_core()
                      ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
               raise e
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
               pm.run(self.state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
               raise patched_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
               self._runPass(idx, pass_inst, state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
               return func(*args, **kwargs)
                      ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
               mutated |= check(pss.run_pass, internal_state)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
               mangled = func(compiler_state)
                         ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
               typemap, return_type, calltypes, errs = type_inference_stage(
                                                       ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
               errs = infer.propagate(raise_errors=raise_errors)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
               raise errors[0]
           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
           No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=None>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           File "numba/cpython/unicode.py", line 1490:
                       def join_list_impl(sep, parts):
                           return join_list(sep, parts)
                           ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086


During: resolving callee type: BoundFunction((<class 'numba.core.types.misc.UnicodeType'>, 'join') for unicode_type)
During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_unicode.py (2519)


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_unicode.py", line 2524, in test_ascii_flag_join
    self.assertEqual(f(), (1, 0, 0, 0))
                     ^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 468, in _compile_for_args
    error_rewrite(e, 'typing')
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 407, in error_rewrite
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 420, in _compile_for_args
    return_val = self.compile(tuple(argtypes))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
    cres = self._compiler.compile(args, return_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
    raise retval
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
    retval = self._compile_core(args, return_type)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
    cres = compiler.compile_extra(self.targetdescr.typing_context,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
    typemap, return_type, calltypes, errs = type_inference_stage(
                                            ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
    errs = infer.propagate(raise_errors=raise_errors)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
    raise errors[0]
numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
- Resolution failure for literal arguments:
No implementation of function Function(<function unicode_join at 0x7fbeb5d03420>) found for signature:

 >>> unicode_join(unicode_type, list(unicode_type)<iv=['abc', '123']>)

There are 2 candidate implementations:
      - Of which 1 did not match due to:
      Overload in function 'unicode_join': File: numba/cpython/unicode.py: Line 1484.
        With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
       Rejected as the implementation raised a specific error:
         TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

        >>> join_list(unicode_type, list(unicode_type)<iv=None>)

       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
               With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

               >>> _pick_kind(int32, int32)

              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int32, int32)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                             infer.build_constraint()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                             self.constrain_statement(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                             self.typeof_assign(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                             self.typeof_global(inst, inst.target, value)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                             typ = self.resolve_value_type(inst, gvar.value)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                             raise TypingError(msg, loc=inst.loc)
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

              During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


              File "numba/cpython/unicode.py", line 1465:
              def join_list(sep, parts):
                  <source elided>
                      length += len(p)
                      kind = _pick_kind(kind, p._kind)
                      ^

                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                      self.resolve(typeinfer, typevars, fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

       During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)


       File "numba/cpython/unicode.py", line 1490:
                   def join_list_impl(sep, parts):
                       return join_list(sep, parts)
                       ^

           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
               constraint(typeinfer)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
               self.resolve(typeinfer, typevars, fnty)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
               sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
               return self.context.resolve_function_type(fnty, pos_args, kw_args)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
               raise last_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
               res = self._resolve_user_function_type(func, args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
               return func.get_call_type(self, args, kws)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
               failures.raise_error()
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
               raise errors.TypingError(self.format())
           numba.core.errors.TypingError: No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=None>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           The above exception was the direct cause of the following exception:
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
               sig = temp.apply(nolitargs, nolitkws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
               sig = generic(args, kws)
                     ^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
               disp, new_args = self._get_impl(args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
               impl, args = self._build_impl(cache_key, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
               disp_type.get_call_type(self.context, args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
               self.dispatcher.get_call_template(args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
               self.compile(tuple(args))
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
               cres = self._compiler.compile(args, return_type)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
               raise retval
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
               retval = self._compile_core(args, return_type)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
               cres = compiler.compile_extra(self.targetdescr.typing_context,
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
               return pipeline.compile_extra(func)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
               return self._compile_bytecode()
                      ^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
               return self._compile_core()
                      ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
               raise e
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
               pm.run(self.state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
               raise patched_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
               self._runPass(idx, pass_inst, state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
               return func(*args, **kwargs)
                      ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
               mutated |= check(pss.run_pass, internal_state)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
               mangled = func(compiler_state)
                         ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
               typemap, return_type, calltypes, errs = type_inference_stage(
                                                       ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
               errs = infer.propagate(raise_errors=raise_errors)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
               raise errors[0]
           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
           No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=None>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           File "numba/cpython/unicode.py", line 1490:
                       def join_list_impl(sep, parts):
                           return join_list(sep, parts)
                           ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
      - Of which 1 did not match due to:
      Overload in function 'unicode_join': File: numba/cpython/unicode.py: Line 1484.
        With argument(s): '(unicode_type, list(unicode_type)<iv=['abc', '123']>)':
       Rejected as the implementation raised a specific error:
         TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

        >>> join_list(unicode_type, list(unicode_type)<iv=['abc', '123']>)

       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
               With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

               >>> _pick_kind(int32, int32)

              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int32, int32)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                             infer.build_constraint()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                             self.constrain_statement(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                             self.typeof_assign(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                             self.typeof_global(inst, inst.target, value)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                             typ = self.resolve_value_type(inst, gvar.value)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                             raise TypingError(msg, loc=inst.loc)
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

              During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


              File "numba/cpython/unicode.py", line 1465:
              def join_list(sep, parts):
                  <source elided>
                      length += len(p)
                      kind = _pick_kind(kind, p._kind)
                      ^

                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                      self.resolve(typeinfer, typevars, fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

       During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)


       File "numba/cpython/unicode.py", line 1490:
                   def join_list_impl(sep, parts):
                       return join_list(sep, parts)
                       ^

           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
               constraint(typeinfer)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
               self.resolve(typeinfer, typevars, fnty)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
               sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
               return self.context.resolve_function_type(fnty, pos_args, kw_args)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
               raise last_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
               res = self._resolve_user_function_type(func, args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
               return func.get_call_type(self, args, kws)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
               failures.raise_error()
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
               raise errors.TypingError(self.format())
           numba.core.errors.TypingError: No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=['abc', '123']>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           The above exception was the direct cause of the following exception:
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 303, in get_call_type
               sig = temp.apply(args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
               sig = generic(args, kws)
                     ^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
               disp, new_args = self._get_impl(args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
               impl, args = self._build_impl(cache_key, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
               disp_type.get_call_type(self.context, args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
               self.dispatcher.get_call_template(args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
               self.compile(tuple(args))
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
               cres = self._compiler.compile(args, return_type)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
               raise retval
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
               retval = self._compile_core(args, return_type)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
               cres = compiler.compile_extra(self.targetdescr.typing_context,
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
               return pipeline.compile_extra(func)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
               return self._compile_bytecode()
                      ^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
               return self._compile_core()
                      ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
               raise e
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
               pm.run(self.state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
               raise patched_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
               self._runPass(idx, pass_inst, state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
               return func(*args, **kwargs)
                      ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
               mutated |= check(pss.run_pass, internal_state)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
               mangled = func(compiler_state)
                         ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
               typemap, return_type, calltypes, errs = type_inference_stage(
                                                       ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
               errs = infer.propagate(raise_errors=raise_errors)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
               raise errors[0]
           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
           No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=['abc', '123']>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           File "numba/cpython/unicode.py", line 1490:
                       def join_list_impl(sep, parts):
                           return join_list(sep, parts)
                           ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

- Resolution failure for non-literal arguments:
No implementation of function Function(<function unicode_join at 0x7fbeb5d03420>) found for signature:

 >>> unicode_join(unicode_type, list(unicode_type)<iv=None>)

There are 2 candidate implementations:
      - Of which 2 did not match due to:
      Overload in function 'unicode_join': File: numba/cpython/unicode.py: Line 1484.
        With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
       Rejected as the implementation raised a specific error:
         TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

        >>> join_list(unicode_type, list(unicode_type)<iv=None>)

       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
               With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

               >>> _pick_kind(int32, int32)

              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int32, int32)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                             infer.build_constraint()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                             self.constrain_statement(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                             self.typeof_assign(inst)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                             self.typeof_global(inst, inst.target, value)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                             typ = self.resolve_value_type(inst, gvar.value)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                             raise TypingError(msg, loc=inst.loc)
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

              During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


              File "numba/cpython/unicode.py", line 1465:
              def join_list(sep, parts):
                  <source elided>
                      length += len(p)
                      kind = _pick_kind(kind, p._kind)
                      ^

                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                      self.resolve(typeinfer, typevars, fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

       During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)


       File "numba/cpython/unicode.py", line 1490:
                   def join_list_impl(sep, parts):
                       return join_list(sep, parts)
                       ^

           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
               constraint(typeinfer)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
               self.resolve(typeinfer, typevars, fnty)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
               sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
               return self.context.resolve_function_type(fnty, pos_args, kw_args)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
               raise last_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
               res = self._resolve_user_function_type(func, args, kws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
               return func.get_call_type(self, args, kws)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
               failures.raise_error()
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
               raise errors.TypingError(self.format())
           numba.core.errors.TypingError: No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=None>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           The above exception was the direct cause of the following exception:
           Traceback (most recent call last):
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
               sig = temp.apply(nolitargs, nolitkws)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
               sig = generic(args, kws)
                     ^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
               disp, new_args = self._get_impl(args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
               impl, args = self._build_impl(cache_key, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
               disp_type.get_call_type(self.context, args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
               self.dispatcher.get_call_template(args, kws)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
               self.compile(tuple(args))
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
               cres = self._compiler.compile(args, return_type)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
               raise retval
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
               retval = self._compile_core(args, return_type)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
               cres = compiler.compile_extra(self.targetdescr.typing_context,
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
               return pipeline.compile_extra(func)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
               return self._compile_bytecode()
                      ^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
               return self._compile_core()
                      ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
               raise e
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
               pm.run(self.state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
               raise patched_exception
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
               self._runPass(idx, pass_inst, state)
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
               return func(*args, **kwargs)
                      ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
               mutated |= check(pss.run_pass, internal_state)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
               mangled = func(compiler_state)
                         ^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
               typemap, return_type, calltypes, errs = type_inference_stage(
                                                       ^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
               errs = infer.propagate(raise_errors=raise_errors)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
               raise errors[0]
           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
           No implementation of function Function(<function join_list at 0x7fbeb5d03100>) found for signature:

            >>> join_list(unicode_type, list(unicode_type)<iv=None>)

           There are 2 candidate implementations:
                 - Of which 2 did not match due to:
                 Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                   With argument(s): '(unicode_type, list(unicode_type)<iv=None>)':
                  Rejected as the implementation raised a specific error:
                    TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                   >>> _pick_kind(int32, int32)

                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int32, int32)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                 infer.build_constraint()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                 self.constrain_statement(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                 self.typeof_assign(inst)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                 self.typeof_global(inst, inst.target, value)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                 typ = self.resolve_value_type(inst, gvar.value)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                 raise TypingError(msg, loc=inst.loc)
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482

                  During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)


                  File "numba/cpython/unicode.py", line 1465:
                  def join_list(sep, parts):
                      <source elided>
                          length += len(p)
                          kind = _pick_kind(kind, p._kind)
                          ^

                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                          constraint(typeinfer)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                          self.resolve(typeinfer, typevars, fnty)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                          sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                          return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                          raise last_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                          res = self._resolve_user_function_type(func, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                          return func.get_call_type(self, args, kws)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                          failures.raise_error()
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                          raise errors.TypingError(self.format())
                      numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      The above exception was the direct cause of the following exception:
                      Traceback (most recent call last):
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                          sig = temp.apply(nolitargs, nolitkws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                          sig = generic(args, kws)
                                ^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                          disp, new_args = self._get_impl(args, kws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                          impl, args = self._build_impl(cache_key, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                          disp_type.get_call_type(self.context, args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                          self.dispatcher.get_call_template(args, kws)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                          self.compile(tuple(args))
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                          cres = self._compiler.compile(args, return_type)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                          raise retval
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                          retval = self._compile_core(args, return_type)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                          cres = compiler.compile_extra(self.targetdescr.typing_context,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                          return pipeline.compile_extra(func)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                          return self._compile_bytecode()
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                          return self._compile_core()
                                 ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                          raise e
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                          pm.run(self.state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                          raise patched_exception
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                          self._runPass(idx, pass_inst, state)
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                          return func(*args, **kwargs)
                                 ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                          mutated |= check(pss.run_pass, internal_state)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                          mangled = func(compiler_state)
                                    ^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                          typemap, return_type, calltypes, errs = type_inference_stage(
                                                                  ^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                          errs = infer.propagate(raise_errors=raise_errors)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                          raise errors[0]
                      numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                      No implementation of function Function(<function _pick_kind at 0x7fbeb5d009a0>) found for signature:

                       >>> _pick_kind(int32, int32)

                      There are 2 candidate implementations:
                            - Of which 2 did not match due to:
                            Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                              With argument(s): '(int32, int32)':
                             Rejected as the implementation raised a specific error:
                               TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                 Traceback (most recent call last):
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                     sig = temp.apply(nolitargs, nolitkws)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                     sig = generic(args, kws)
                                           ^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                     disp, new_args = self._get_impl(args, kws)
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                     impl, args = self._build_impl(cache_key, args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                     disp_type.get_call_type(self.context, args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                     self.dispatcher.get_call_template(args, kws)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                     self.compile(tuple(args))
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                     cres = self._compiler.compile(args, return_type)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                     raise retval
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                     retval = self._compile_core(args, return_type)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                     cres = compiler.compile_extra(self.targetdescr.typing_context,
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                     return pipeline.compile_extra(func)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                     return self._compile_bytecode()
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                     return self._compile_core()
                                            ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                     raise e
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                     pm.run(self.state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                     raise patched_exception
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                     self._runPass(idx, pass_inst, state)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                     return func(*args, **kwargs)
                                            ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                     mutated |= check(pss.run_pass, internal_state)
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                     mangled = func(compiler_state)
                                               ^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                     typemap, return_type, calltypes, errs = type_inference_stage(
                                                                             ^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                     infer.build_constraint()
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                     self.constrain_statement(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                     self.typeof_assign(inst)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                     self.typeof_global(inst, inst.target, value)
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                     typ = self.resolve_value_type(inst, gvar.value)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                   File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                     raise TypingError(msg, loc=inst.loc)
                                 numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                 NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                        raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                      During: resolving callee type: Function(<function _pick_kind at 0x7fbeb5d009a0>)
                      During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1465)
                      File "numba/cpython/unicode.py", line 1465:
                      def join_list(sep, parts):
                          <source elided>
                              length += len(p)
                              kind = _pick_kind(kind, p._kind)
                              ^
             raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
           During: resolving callee type: Function(<function join_list at 0x7fbeb5d03100>)
           During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1490)
           File "numba/cpython/unicode.py", line 1490:
                       def join_list_impl(sep, parts):
                           return join_list(sep, parts)
                           ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086


During: resolving callee type: BoundFunction((<class 'numba.core.types.misc.UnicodeType'>, 'join') for unicode_type)
During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_unicode.py (2519)


File "numba/tests/test_unicode.py", line 2519:
        def f():
            <source elided>
            s4 = '大处着眼，小处着手。'
            return (",".join([s1, s2])._is_ascii,
            ^


----------------------------------------------------------------------
Ran 6 tests in 145.059s

FAILED (errors=3)
