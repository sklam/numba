Parallel: 6. Serial: 0
test_repr (numba.tests.test_builtins.TestStrAndReprBuiltin.test_repr) ... ERROR
test_repr_fallback (numba.tests.test_builtins.TestStrAndReprBuiltin.test_repr_fallback) ... ok
test_str_calls_dunder_str (numba.tests.test_builtins.TestStrAndReprBuiltin.test_str_calls_dunder_str) ... ok
test_str_default (numba.tests.test_builtins.TestStrAndReprBuiltin.test_str_default) ... ok
test_str_falls_back_to_repr (numba.tests.test_builtins.TestStrAndReprBuiltin.test_str_falls_back_to_repr) ... ok
test_str_object_kwarg (numba.tests.test_builtins.TestStrAndReprBuiltin.test_str_object_kwarg) ... ok

======================================================================
ERROR: test_repr (numba.tests.test_builtins.TestStrAndReprBuiltin.test_repr)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
    raise last_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
    failures.raise_error()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: No implementation of function Function(<built-in function repr>) found for signature:
 
 >>> repr(unicode_type)
 
There are 2 candidate implementations:
  - Of which 2 did not match due to:
  Overload in function 'ol_repr_generic': File: numba/cpython/builtins.py: Line 980.
    With argument(s): '(unicode_type)':
   Rejected as the implementation raised a specific error:
     TypingError: Failed in nopython mode pipeline (step: nopython frontend)
   - Resolution failure for literal arguments:
   No implementation of function Function(<function unicode_repr at 0x7fdcff7d71a0>) found for signature:
   
    >>> unicode_repr(unicode_type)
   
   There are 2 candidate implementations:
         - Of which 2 did not match due to:
         Overload in function 'unicode_repr': File: numba/cpython/unicode.py: Line 2522.
           With argument(s): '(unicode_type)':
          Rejected as the implementation raised a specific error:
            TypingError: Failed in nopython mode pipeline (step: nopython frontend)
          No implementation of function Function(<built-in function add>) found for signature:
   
           >>> add(Literal[str]('), unicode_type)
   
          There are 20 candidate implementations:
                - Of which 17 did not match due to:
                Overload of function 'add': File: <numerous>: Line N/A.
                  With argument(s): '(unicode_type, unicode_type)':
                 No match.
                - Of which 2 did not match due to:
                Operator Overload in function 'add': File: unknown: Line unknown.
                  With argument(s): '(unicode_type, unicode_type)':
                 No match for registered cases:
                  * (int64, int64) -> int64
                  * (int64, uint64) -> int64
                  * (uint64, int64) -> int64
                  * (uint64, uint64) -> uint64
                  * (float32, float32) -> float32
                  * (float64, float64) -> float64
                  * (complex64, complex64) -> complex64
                  * (complex128, complex128) -> complex128
   
                - Of which 1 did not match due to:
                Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                  With argument(s): '(unicode_type, unicode_type)':
                 Rejected as the implementation raised a specific error:
                   TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                 No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                  >>> _pick_kind(int32, int32)
   
                 There are 2 candidate implementations:
                       - Of which 2 did not match due to:
                       Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                         With argument(s): '(int32, int32)':
                        Rejected as the implementation raised a specific error:
                          TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                            Traceback (most recent call last):
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                sig = temp.apply(nolitargs, nolitkws)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                sig = generic(args, kws)
                                      ^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                disp, new_args = self._get_impl(args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                impl, args = self._build_impl(cache_key, args, kws)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                disp_type.get_call_type(self.context, args, kws)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                self.dispatcher.get_call_template(args, kws)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                self.compile(tuple(args))
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                cres = self._compiler.compile(args, return_type)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                raise retval
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                retval = self._compile_core(args, return_type)
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                cres = compiler.compile_extra(self.targetdescr.typing_context,
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                return pipeline.compile_extra(func)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                return self._compile_bytecode()
                                       ^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                return self._compile_core()
                                       ^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                raise e
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                pm.run(self.state)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                raise patched_exception
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                self._runPass(idx, pass_inst, state)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                return func(*args, **kwargs)
                                       ^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                mutated |= check(pss.run_pass, internal_state)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                mangled = func(compiler_state)
                                          ^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                typemap, return_type, calltypes, errs = type_inference_stage(
                                                                        ^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                infer.build_constraint()
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                self.constrain_statement(inst)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                self.typeof_assign(inst)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                self.typeof_global(inst, inst.target, value)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                typ = self.resolve_value_type(inst, gvar.value)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                raise TypingError(msg, loc=inst.loc)
                            numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                   raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                 During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                 During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
   
   
                 File "numba/cpython/unicode.py", line 1849:
                         def concat_impl(a, b):
                             <source elided>
                             new_length = a._length + b._length
                             new_kind = _pick_kind(a._kind, b._kind)
                             ^
   
                     Traceback (most recent call last):
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                         constraint(typeinfer)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                         self.resolve(typeinfer, typevars, fnty)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                         sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                         return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                         raise last_exception
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                         res = self._resolve_user_function_type(func, args, kws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                         return func.get_call_type(self, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                         failures.raise_error()
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                         raise errors.TypingError(self.format())
                     numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                      >>> _pick_kind(int32, int32)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                     The above exception was the direct cause of the following exception:
                     Traceback (most recent call last):
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                         sig = temp.apply(nolitargs, nolitkws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                         sig = generic(args, kws)
                               ^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                         disp, new_args = self._get_impl(args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                         impl, args = self._build_impl(cache_key, args, kws)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                         disp_type.get_call_type(self.context, args, kws)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                         self.dispatcher.get_call_template(args, kws)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                         self.compile(tuple(args))
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                         cres = self._compiler.compile(args, return_type)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                         raise retval
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                         retval = self._compile_core(args, return_type)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                         cres = compiler.compile_extra(self.targetdescr.typing_context,
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                         return pipeline.compile_extra(func)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                         return self._compile_bytecode()
                                ^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                         return self._compile_core()
                                ^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                         raise e
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                         pm.run(self.state)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                         raise patched_exception
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                         self._runPass(idx, pass_inst, state)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                         return func(*args, **kwargs)
                                ^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                         mutated |= check(pss.run_pass, internal_state)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                         mangled = func(compiler_state)
                                   ^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                         typemap, return_type, calltypes, errs = type_inference_stage(
                                                                 ^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                         errs = infer.propagate(raise_errors=raise_errors)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                         raise errors[0]
                     numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                      >>> _pick_kind(int32, int32)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                     File "numba/cpython/unicode.py", line 1849:
                             def concat_impl(a, b):
                                 <source elided>
                                 new_length = a._length + b._length
                                 new_kind = _pick_kind(a._kind, b._kind)
                                 ^
            raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
   
          During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
   
          File "numba/cpython/unicode.py", line 2526:
          def unicode_repr(s):
              <source elided>
              # then recurses somewhere in imports.
              return lambda s: "'" + s + "'"
              ^
   
              Traceback (most recent call last):
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                  constraint(typeinfer)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 704, in __call__
                  self.resolve(typeinfer, typeinfer.typevars, fnty=fnty)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                  sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                  return self.context.resolve_function_type(fnty, pos_args, kw_args)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                  raise last_exception
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                  res = self._resolve_user_function_type(func, args, kws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                  return func.get_call_type(self, args, kws)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                  failures.raise_error()
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                  raise errors.TypingError(self.format())
              numba.core.errors.TypingError: No implementation of function Function(<built-in function add>) found for signature:
   
               >>> add(Literal[str]('), unicode_type)
   
              There are 20 candidate implementations:
                    - Of which 17 did not match due to:
                    Overload of function 'add': File: <numerous>: Line N/A.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match.
                    - Of which 2 did not match due to:
                    Operator Overload in function 'add': File: unknown: Line unknown.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match for registered cases:
                      * (int64, int64) -> int64
                      * (int64, uint64) -> int64
                      * (uint64, int64) -> int64
                      * (uint64, uint64) -> uint64
                      * (float32, float32) -> float32
                      * (float64, float64) -> float64
                      * (complex64, complex64) -> complex64
                      * (complex128, complex128) -> complex128
   
                    - Of which 1 did not match due to:
                    Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                      With argument(s): '(unicode_type, unicode_type)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                      >>> _pick_kind(int32, int32)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
   
   
                     File "numba/cpython/unicode.py", line 1849:
                             def concat_impl(a, b):
                                 <source elided>
                                 new_length = a._length + b._length
                                 new_kind = _pick_kind(a._kind, b._kind)
                                 ^
   
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                          >>> _pick_kind(int32, int32)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                          >>> _pick_kind(int32, int32)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
              The above exception was the direct cause of the following exception:
              Traceback (most recent call last):
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                  sig = temp.apply(nolitargs, nolitkws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                  sig = generic(args, kws)
                        ^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                  disp, new_args = self._get_impl(args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                  impl, args = self._build_impl(cache_key, args, kws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                  disp_type.get_call_type(self.context, args, kws)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                  self.dispatcher.get_call_template(args, kws)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                  self.compile(tuple(args))
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                  cres = self._compiler.compile(args, return_type)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                  raise retval
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                  retval = self._compile_core(args, return_type)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                  cres = compiler.compile_extra(self.targetdescr.typing_context,
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                  return pipeline.compile_extra(func)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                  return self._compile_bytecode()
                         ^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                  return self._compile_core()
                         ^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                  raise e
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                  pm.run(self.state)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                  raise patched_exception
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                  self._runPass(idx, pass_inst, state)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                  return func(*args, **kwargs)
                         ^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                  mutated |= check(pss.run_pass, internal_state)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                  mangled = func(compiler_state)
                            ^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                  typemap, return_type, calltypes, errs = type_inference_stage(
                                                          ^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                  errs = infer.propagate(raise_errors=raise_errors)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                  raise errors[0]
              numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<built-in function add>) found for signature:
   
               >>> add(Literal[str]('), unicode_type)
   
              There are 20 candidate implementations:
                    - Of which 17 did not match due to:
                    Overload of function 'add': File: <numerous>: Line N/A.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match.
                    - Of which 2 did not match due to:
                    Operator Overload in function 'add': File: unknown: Line unknown.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match for registered cases:
                      * (int64, int64) -> int64
                      * (int64, uint64) -> int64
                      * (uint64, int64) -> int64
                      * (uint64, uint64) -> uint64
                      * (float32, float32) -> float32
                      * (float64, float64) -> float64
                      * (complex64, complex64) -> complex64
                      * (complex128, complex128) -> complex128
   
                    - Of which 1 did not match due to:
                    Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                      With argument(s): '(unicode_type, unicode_type)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                      >>> _pick_kind(int32, int32)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
   
   
                     File "numba/cpython/unicode.py", line 1849:
                             def concat_impl(a, b):
                                 <source elided>
                                 new_length = a._length + b._length
                                 new_kind = _pick_kind(a._kind, b._kind)
                                 ^
   
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                          >>> _pick_kind(int32, int32)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                          >>> _pick_kind(int32, int32)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
              File "numba/cpython/unicode.py", line 2526:
              def unicode_repr(s):
                  <source elided>
                  # then recurses somewhere in imports.
                  return lambda s: "'" + s + "'"
                  ^
     raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
   
   - Resolution failure for non-literal arguments:
   None
   
   During: resolving callee type: BoundFunction((<class 'numba.core.types.misc.UnicodeType'>, '__repr__') for unicode_type)
   During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (986)
   
   
   File "numba/cpython/builtins.py", line 986:
       def impl(obj):
           <source elided>
           if hasattr(obj, attr) == True:
               return getattr(obj, attr)()
               ^
   
       Traceback (most recent call last):
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
           constraint(typeinfer)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
           self.resolve(typeinfer, typevars, fnty)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
           sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
           return self.context.resolve_function_type(fnty, pos_args, kw_args)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
           raise last_exception
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
           res = self._resolve_user_function_type(func, args, kws)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
           return func.get_call_type(self, args, kws)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 462, in get_call_type
           raise errors.TypingError(nested_msg('literal', literal_e) +
       numba.core.errors.TypingError: - Resolution failure for literal arguments:
       No implementation of function Function(<function unicode_repr at 0x7fdcff7d71a0>) found for signature:
        >>> unicode_repr(unicode_type)
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'unicode_repr': File: numba/cpython/unicode.py: Line 2522.
               With argument(s): '(unicode_type)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<built-in function add>) found for signature:
               >>> add(Literal[str]('), unicode_type)
              There are 20 candidate implementations:
                    - Of which 17 did not match due to:
                    Overload of function 'add': File: <numerous>: Line N/A.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match.
                    - Of which 2 did not match due to:
                    Operator Overload in function 'add': File: unknown: Line unknown.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match for registered cases:
                      * (int64, int64) -> int64
                      * (int64, uint64) -> int64
                      * (uint64, int64) -> int64
                      * (uint64, uint64) -> uint64
                      * (float32, float32) -> float32
                      * (float64, float64) -> float64
                      * (complex64, complex64) -> complex64
                      * (complex128, complex128) -> complex128
                    - Of which 1 did not match due to:
                    Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                      With argument(s): '(unicode_type, unicode_type)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                      >>> _pick_kind(int32, int32)
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                     File "numba/cpython/unicode.py", line 1849:
                             def concat_impl(a, b):
                                 <source elided>
                                 new_length = a._length + b._length
                                 new_kind = _pick_kind(a._kind, b._kind)
                                 ^
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
              File "numba/cpython/unicode.py", line 2526:
              def unicode_repr(s):
                  <source elided>
                  # then recurses somewhere in imports.
                  return lambda s: "'" + s + "'"
                  ^
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 704, in __call__
                      self.resolve(typeinfer, typeinfer.typevars, fnty=fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<built-in function add>) found for signature:
                   >>> add(Literal[str]('), unicode_type)
                  There are 20 candidate implementations:
                        - Of which 17 did not match due to:
                        Overload of function 'add': File: <numerous>: Line N/A.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match.
                        - Of which 2 did not match due to:
                        Operator Overload in function 'add': File: unknown: Line unknown.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match for registered cases:
                          * (int64, int64) -> int64
                          * (int64, uint64) -> int64
                          * (uint64, int64) -> int64
                          * (uint64, uint64) -> uint64
                          * (float32, float32) -> float32
                          * (float64, float64) -> float64
                          * (complex64, complex64) -> complex64
                          * (complex128, complex128) -> complex128
                        - Of which 1 did not match due to:
                        Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                          With argument(s): '(unicode_type, unicode_type)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             File "numba/cpython/unicode.py", line 1849:
                                     def concat_impl(a, b):
                                         <source elided>
                                         new_length = a._length + b._length
                                         new_kind = _pick_kind(a._kind, b._kind)
                                         ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<built-in function add>) found for signature:
                   >>> add(Literal[str]('), unicode_type)
                  There are 20 candidate implementations:
                        - Of which 17 did not match due to:
                        Overload of function 'add': File: <numerous>: Line N/A.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match.
                        - Of which 2 did not match due to:
                        Operator Overload in function 'add': File: unknown: Line unknown.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match for registered cases:
                          * (int64, int64) -> int64
                          * (int64, uint64) -> int64
                          * (uint64, int64) -> int64
                          * (uint64, uint64) -> uint64
                          * (float32, float32) -> float32
                          * (float64, float64) -> float64
                          * (complex64, complex64) -> complex64
                          * (complex128, complex128) -> complex128
                        - Of which 1 did not match due to:
                        Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                          With argument(s): '(unicode_type, unicode_type)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             File "numba/cpython/unicode.py", line 1849:
                                     def concat_impl(a, b):
                                         <source elided>
                                         new_length = a._length + b._length
                                         new_kind = _pick_kind(a._kind, b._kind)
                                         ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
                  File "numba/cpython/unicode.py", line 2526:
                  def unicode_repr(s):
                      <source elided>
                      # then recurses somewhere in imports.
                      return lambda s: "'" + s + "'"
                      ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
       - Resolution failure for non-literal arguments:
       None
       During: resolving callee type: BoundFunction((<class 'numba.core.types.misc.UnicodeType'>, '__repr__') for unicode_type)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (986)
       The above exception was the direct cause of the following exception:
       Traceback (most recent call last):
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
           sig = temp.apply(nolitargs, nolitkws)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
           sig = generic(args, kws)
                 ^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
           disp, new_args = self._get_impl(args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
           impl, args = self._build_impl(cache_key, args, kws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
           disp_type.get_call_type(self.context, args, kws)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
           self.dispatcher.get_call_template(args, kws)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
           self.compile(tuple(args))
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
           cres = self._compiler.compile(args, return_type)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
           raise retval
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
           retval = self._compile_core(args, return_type)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
           cres = compiler.compile_extra(self.targetdescr.typing_context,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
           return pipeline.compile_extra(func)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
           return self._compile_bytecode()
                  ^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
           return self._compile_core()
                  ^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
           raise e
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
           pm.run(self.state)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
           raise patched_exception
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
           self._runPass(idx, pass_inst, state)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
           return func(*args, **kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
           mutated |= check(pss.run_pass, internal_state)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
           mangled = func(compiler_state)
                     ^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
           typemap, return_type, calltypes, errs = type_inference_stage(
                                                   ^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
           errs = infer.propagate(raise_errors=raise_errors)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
           raise errors[0]
       numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       - Resolution failure for literal arguments:
       No implementation of function Function(<function unicode_repr at 0x7fdcff7d71a0>) found for signature:
        >>> unicode_repr(unicode_type)
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'unicode_repr': File: numba/cpython/unicode.py: Line 2522.
               With argument(s): '(unicode_type)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<built-in function add>) found for signature:
               >>> add(Literal[str]('), unicode_type)
              There are 20 candidate implementations:
                    - Of which 17 did not match due to:
                    Overload of function 'add': File: <numerous>: Line N/A.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match.
                    - Of which 2 did not match due to:
                    Operator Overload in function 'add': File: unknown: Line unknown.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match for registered cases:
                      * (int64, int64) -> int64
                      * (int64, uint64) -> int64
                      * (uint64, int64) -> int64
                      * (uint64, uint64) -> uint64
                      * (float32, float32) -> float32
                      * (float64, float64) -> float64
                      * (complex64, complex64) -> complex64
                      * (complex128, complex128) -> complex128
                    - Of which 1 did not match due to:
                    Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                      With argument(s): '(unicode_type, unicode_type)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                      >>> _pick_kind(int32, int32)
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                     File "numba/cpython/unicode.py", line 1849:
                             def concat_impl(a, b):
                                 <source elided>
                                 new_length = a._length + b._length
                                 new_kind = _pick_kind(a._kind, b._kind)
                                 ^
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
              File "numba/cpython/unicode.py", line 2526:
              def unicode_repr(s):
                  <source elided>
                  # then recurses somewhere in imports.
                  return lambda s: "'" + s + "'"
                  ^
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 704, in __call__
                      self.resolve(typeinfer, typeinfer.typevars, fnty=fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<built-in function add>) found for signature:
                   >>> add(Literal[str]('), unicode_type)
                  There are 20 candidate implementations:
                        - Of which 17 did not match due to:
                        Overload of function 'add': File: <numerous>: Line N/A.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match.
                        - Of which 2 did not match due to:
                        Operator Overload in function 'add': File: unknown: Line unknown.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match for registered cases:
                          * (int64, int64) -> int64
                          * (int64, uint64) -> int64
                          * (uint64, int64) -> int64
                          * (uint64, uint64) -> uint64
                          * (float32, float32) -> float32
                          * (float64, float64) -> float64
                          * (complex64, complex64) -> complex64
                          * (complex128, complex128) -> complex128
                        - Of which 1 did not match due to:
                        Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                          With argument(s): '(unicode_type, unicode_type)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             File "numba/cpython/unicode.py", line 1849:
                                     def concat_impl(a, b):
                                         <source elided>
                                         new_length = a._length + b._length
                                         new_kind = _pick_kind(a._kind, b._kind)
                                         ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<built-in function add>) found for signature:
                   >>> add(Literal[str]('), unicode_type)
                  There are 20 candidate implementations:
                        - Of which 17 did not match due to:
                        Overload of function 'add': File: <numerous>: Line N/A.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match.
                        - Of which 2 did not match due to:
                        Operator Overload in function 'add': File: unknown: Line unknown.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match for registered cases:
                          * (int64, int64) -> int64
                          * (int64, uint64) -> int64
                          * (uint64, int64) -> int64
                          * (uint64, uint64) -> uint64
                          * (float32, float32) -> float32
                          * (float64, float64) -> float64
                          * (complex64, complex64) -> complex64
                          * (complex128, complex128) -> complex128
                        - Of which 1 did not match due to:
                        Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                          With argument(s): '(unicode_type, unicode_type)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             File "numba/cpython/unicode.py", line 1849:
                                     def concat_impl(a, b):
                                         <source elided>
                                         new_length = a._length + b._length
                                         new_kind = _pick_kind(a._kind, b._kind)
                                         ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
                  File "numba/cpython/unicode.py", line 2526:
                  def unicode_repr(s):
                      <source elided>
                      # then recurses somewhere in imports.
                      return lambda s: "'" + s + "'"
                      ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
       - Resolution failure for non-literal arguments:
       None
       During: resolving callee type: BoundFunction((<class 'numba.core.types.misc.UnicodeType'>, '__repr__') for unicode_type)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (986)
       File "numba/cpython/builtins.py", line 986:
           def impl(obj):
               <source elided>
               if hasattr(obj, attr) == True:
                   return getattr(obj, attr)()
                   ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

During: resolving callee type: Function(<built-in function repr>)
During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_builtins.py (1588)


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_builtins.py", line 1591, in test_repr
    self.assertEqual(foo(x), foo.py_func(x))
                     ^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 468, in _compile_for_args
    error_rewrite(e, 'typing')
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 407, in error_rewrite
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 420, in _compile_for_args
    return_val = self.compile(tuple(argtypes))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
    cres = self._compiler.compile(args, return_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
    raise retval
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
    retval = self._compile_core(args, return_type)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
    cres = compiler.compile_extra(self.targetdescr.typing_context,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
    typemap, return_type, calltypes, errs = type_inference_stage(
                                            ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
    errs = infer.propagate(raise_errors=raise_errors)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
    raise errors[0]
numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
No implementation of function Function(<built-in function repr>) found for signature:
 
 >>> repr(unicode_type)
 
There are 2 candidate implementations:
  - Of which 2 did not match due to:
  Overload in function 'ol_repr_generic': File: numba/cpython/builtins.py: Line 980.
    With argument(s): '(unicode_type)':
   Rejected as the implementation raised a specific error:
     TypingError: Failed in nopython mode pipeline (step: nopython frontend)
   - Resolution failure for literal arguments:
   No implementation of function Function(<function unicode_repr at 0x7fdcff7d71a0>) found for signature:
   
    >>> unicode_repr(unicode_type)
   
   There are 2 candidate implementations:
         - Of which 2 did not match due to:
         Overload in function 'unicode_repr': File: numba/cpython/unicode.py: Line 2522.
           With argument(s): '(unicode_type)':
          Rejected as the implementation raised a specific error:
            TypingError: Failed in nopython mode pipeline (step: nopython frontend)
          No implementation of function Function(<built-in function add>) found for signature:
   
           >>> add(Literal[str]('), unicode_type)
   
          There are 20 candidate implementations:
                - Of which 17 did not match due to:
                Overload of function 'add': File: <numerous>: Line N/A.
                  With argument(s): '(unicode_type, unicode_type)':
                 No match.
                - Of which 2 did not match due to:
                Operator Overload in function 'add': File: unknown: Line unknown.
                  With argument(s): '(unicode_type, unicode_type)':
                 No match for registered cases:
                  * (int64, int64) -> int64
                  * (int64, uint64) -> int64
                  * (uint64, int64) -> int64
                  * (uint64, uint64) -> uint64
                  * (float32, float32) -> float32
                  * (float64, float64) -> float64
                  * (complex64, complex64) -> complex64
                  * (complex128, complex128) -> complex128
   
                - Of which 1 did not match due to:
                Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                  With argument(s): '(unicode_type, unicode_type)':
                 Rejected as the implementation raised a specific error:
                   TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                 No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                  >>> _pick_kind(int32, int32)
   
                 There are 2 candidate implementations:
                       - Of which 2 did not match due to:
                       Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                         With argument(s): '(int32, int32)':
                        Rejected as the implementation raised a specific error:
                          TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                            Traceback (most recent call last):
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                sig = temp.apply(nolitargs, nolitkws)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                sig = generic(args, kws)
                                      ^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                disp, new_args = self._get_impl(args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                impl, args = self._build_impl(cache_key, args, kws)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                disp_type.get_call_type(self.context, args, kws)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                self.dispatcher.get_call_template(args, kws)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                self.compile(tuple(args))
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                cres = self._compiler.compile(args, return_type)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                raise retval
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                retval = self._compile_core(args, return_type)
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                cres = compiler.compile_extra(self.targetdescr.typing_context,
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                return pipeline.compile_extra(func)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                return self._compile_bytecode()
                                       ^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                return self._compile_core()
                                       ^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                raise e
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                pm.run(self.state)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                raise patched_exception
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                self._runPass(idx, pass_inst, state)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                return func(*args, **kwargs)
                                       ^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                mutated |= check(pss.run_pass, internal_state)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                mangled = func(compiler_state)
                                          ^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                typemap, return_type, calltypes, errs = type_inference_stage(
                                                                        ^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                infer.build_constraint()
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                self.constrain_statement(inst)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                self.typeof_assign(inst)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                self.typeof_global(inst, inst.target, value)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                typ = self.resolve_value_type(inst, gvar.value)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                raise TypingError(msg, loc=inst.loc)
                            numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                   raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                 During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                 During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
   
   
                 File "numba/cpython/unicode.py", line 1849:
                         def concat_impl(a, b):
                             <source elided>
                             new_length = a._length + b._length
                             new_kind = _pick_kind(a._kind, b._kind)
                             ^
   
                     Traceback (most recent call last):
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                         constraint(typeinfer)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                         self.resolve(typeinfer, typevars, fnty)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                         sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                         return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                         raise last_exception
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                         res = self._resolve_user_function_type(func, args, kws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                         return func.get_call_type(self, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                         failures.raise_error()
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                         raise errors.TypingError(self.format())
                     numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                      >>> _pick_kind(int32, int32)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                     The above exception was the direct cause of the following exception:
                     Traceback (most recent call last):
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                         sig = temp.apply(nolitargs, nolitkws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                         sig = generic(args, kws)
                               ^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                         disp, new_args = self._get_impl(args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                         impl, args = self._build_impl(cache_key, args, kws)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                         disp_type.get_call_type(self.context, args, kws)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                         self.dispatcher.get_call_template(args, kws)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                         self.compile(tuple(args))
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                         cres = self._compiler.compile(args, return_type)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                         raise retval
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                         retval = self._compile_core(args, return_type)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                         cres = compiler.compile_extra(self.targetdescr.typing_context,
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                         return pipeline.compile_extra(func)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                         return self._compile_bytecode()
                                ^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                         return self._compile_core()
                                ^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                         raise e
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                         pm.run(self.state)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                         raise patched_exception
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                         self._runPass(idx, pass_inst, state)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                         return func(*args, **kwargs)
                                ^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                         mutated |= check(pss.run_pass, internal_state)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                         mangled = func(compiler_state)
                                   ^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                         typemap, return_type, calltypes, errs = type_inference_stage(
                                                                 ^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                         errs = infer.propagate(raise_errors=raise_errors)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                         raise errors[0]
                     numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                      >>> _pick_kind(int32, int32)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                     File "numba/cpython/unicode.py", line 1849:
                             def concat_impl(a, b):
                                 <source elided>
                                 new_length = a._length + b._length
                                 new_kind = _pick_kind(a._kind, b._kind)
                                 ^
            raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
   
          During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
   
          File "numba/cpython/unicode.py", line 2526:
          def unicode_repr(s):
              <source elided>
              # then recurses somewhere in imports.
              return lambda s: "'" + s + "'"
              ^
   
              Traceback (most recent call last):
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                  constraint(typeinfer)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 704, in __call__
                  self.resolve(typeinfer, typeinfer.typevars, fnty=fnty)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                  sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                  return self.context.resolve_function_type(fnty, pos_args, kw_args)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                  raise last_exception
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                  res = self._resolve_user_function_type(func, args, kws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                  return func.get_call_type(self, args, kws)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                  failures.raise_error()
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                  raise errors.TypingError(self.format())
              numba.core.errors.TypingError: No implementation of function Function(<built-in function add>) found for signature:
   
               >>> add(Literal[str]('), unicode_type)
   
              There are 20 candidate implementations:
                    - Of which 17 did not match due to:
                    Overload of function 'add': File: <numerous>: Line N/A.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match.
                    - Of which 2 did not match due to:
                    Operator Overload in function 'add': File: unknown: Line unknown.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match for registered cases:
                      * (int64, int64) -> int64
                      * (int64, uint64) -> int64
                      * (uint64, int64) -> int64
                      * (uint64, uint64) -> uint64
                      * (float32, float32) -> float32
                      * (float64, float64) -> float64
                      * (complex64, complex64) -> complex64
                      * (complex128, complex128) -> complex128
   
                    - Of which 1 did not match due to:
                    Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                      With argument(s): '(unicode_type, unicode_type)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                      >>> _pick_kind(int32, int32)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
   
   
                     File "numba/cpython/unicode.py", line 1849:
                             def concat_impl(a, b):
                                 <source elided>
                                 new_length = a._length + b._length
                                 new_kind = _pick_kind(a._kind, b._kind)
                                 ^
   
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                          >>> _pick_kind(int32, int32)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                          >>> _pick_kind(int32, int32)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
              The above exception was the direct cause of the following exception:
              Traceback (most recent call last):
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                  sig = temp.apply(nolitargs, nolitkws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                  sig = generic(args, kws)
                        ^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                  disp, new_args = self._get_impl(args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                  impl, args = self._build_impl(cache_key, args, kws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                  disp_type.get_call_type(self.context, args, kws)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                  self.dispatcher.get_call_template(args, kws)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                  self.compile(tuple(args))
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                  cres = self._compiler.compile(args, return_type)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                  raise retval
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                  retval = self._compile_core(args, return_type)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                  cres = compiler.compile_extra(self.targetdescr.typing_context,
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                  return pipeline.compile_extra(func)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                  return self._compile_bytecode()
                         ^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                  return self._compile_core()
                         ^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                  raise e
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                  pm.run(self.state)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                  raise patched_exception
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                  self._runPass(idx, pass_inst, state)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                  return func(*args, **kwargs)
                         ^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                  mutated |= check(pss.run_pass, internal_state)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                  mangled = func(compiler_state)
                            ^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                  typemap, return_type, calltypes, errs = type_inference_stage(
                                                          ^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                  errs = infer.propagate(raise_errors=raise_errors)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                  raise errors[0]
              numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<built-in function add>) found for signature:
   
               >>> add(Literal[str]('), unicode_type)
   
              There are 20 candidate implementations:
                    - Of which 17 did not match due to:
                    Overload of function 'add': File: <numerous>: Line N/A.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match.
                    - Of which 2 did not match due to:
                    Operator Overload in function 'add': File: unknown: Line unknown.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match for registered cases:
                      * (int64, int64) -> int64
                      * (int64, uint64) -> int64
                      * (uint64, int64) -> int64
                      * (uint64, uint64) -> uint64
                      * (float32, float32) -> float32
                      * (float64, float64) -> float64
                      * (complex64, complex64) -> complex64
                      * (complex128, complex128) -> complex128
   
                    - Of which 1 did not match due to:
                    Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                      With argument(s): '(unicode_type, unicode_type)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                      >>> _pick_kind(int32, int32)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
   
   
                     File "numba/cpython/unicode.py", line 1849:
                             def concat_impl(a, b):
                                 <source elided>
                                 new_length = a._length + b._length
                                 new_kind = _pick_kind(a._kind, b._kind)
                                 ^
   
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                          >>> _pick_kind(int32, int32)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
   
                          >>> _pick_kind(int32, int32)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
              File "numba/cpython/unicode.py", line 2526:
              def unicode_repr(s):
                  <source elided>
                  # then recurses somewhere in imports.
                  return lambda s: "'" + s + "'"
                  ^
     raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
   
   - Resolution failure for non-literal arguments:
   None
   
   During: resolving callee type: BoundFunction((<class 'numba.core.types.misc.UnicodeType'>, '__repr__') for unicode_type)
   During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (986)
   
   
   File "numba/cpython/builtins.py", line 986:
       def impl(obj):
           <source elided>
           if hasattr(obj, attr) == True:
               return getattr(obj, attr)()
               ^
   
       Traceback (most recent call last):
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
           constraint(typeinfer)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
           self.resolve(typeinfer, typevars, fnty)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
           sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
           return self.context.resolve_function_type(fnty, pos_args, kw_args)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
           raise last_exception
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
           res = self._resolve_user_function_type(func, args, kws)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
           return func.get_call_type(self, args, kws)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 462, in get_call_type
           raise errors.TypingError(nested_msg('literal', literal_e) +
       numba.core.errors.TypingError: - Resolution failure for literal arguments:
       No implementation of function Function(<function unicode_repr at 0x7fdcff7d71a0>) found for signature:
        >>> unicode_repr(unicode_type)
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'unicode_repr': File: numba/cpython/unicode.py: Line 2522.
               With argument(s): '(unicode_type)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<built-in function add>) found for signature:
               >>> add(Literal[str]('), unicode_type)
              There are 20 candidate implementations:
                    - Of which 17 did not match due to:
                    Overload of function 'add': File: <numerous>: Line N/A.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match.
                    - Of which 2 did not match due to:
                    Operator Overload in function 'add': File: unknown: Line unknown.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match for registered cases:
                      * (int64, int64) -> int64
                      * (int64, uint64) -> int64
                      * (uint64, int64) -> int64
                      * (uint64, uint64) -> uint64
                      * (float32, float32) -> float32
                      * (float64, float64) -> float64
                      * (complex64, complex64) -> complex64
                      * (complex128, complex128) -> complex128
                    - Of which 1 did not match due to:
                    Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                      With argument(s): '(unicode_type, unicode_type)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                      >>> _pick_kind(int32, int32)
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                     File "numba/cpython/unicode.py", line 1849:
                             def concat_impl(a, b):
                                 <source elided>
                                 new_length = a._length + b._length
                                 new_kind = _pick_kind(a._kind, b._kind)
                                 ^
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
              File "numba/cpython/unicode.py", line 2526:
              def unicode_repr(s):
                  <source elided>
                  # then recurses somewhere in imports.
                  return lambda s: "'" + s + "'"
                  ^
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 704, in __call__
                      self.resolve(typeinfer, typeinfer.typevars, fnty=fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<built-in function add>) found for signature:
                   >>> add(Literal[str]('), unicode_type)
                  There are 20 candidate implementations:
                        - Of which 17 did not match due to:
                        Overload of function 'add': File: <numerous>: Line N/A.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match.
                        - Of which 2 did not match due to:
                        Operator Overload in function 'add': File: unknown: Line unknown.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match for registered cases:
                          * (int64, int64) -> int64
                          * (int64, uint64) -> int64
                          * (uint64, int64) -> int64
                          * (uint64, uint64) -> uint64
                          * (float32, float32) -> float32
                          * (float64, float64) -> float64
                          * (complex64, complex64) -> complex64
                          * (complex128, complex128) -> complex128
                        - Of which 1 did not match due to:
                        Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                          With argument(s): '(unicode_type, unicode_type)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             File "numba/cpython/unicode.py", line 1849:
                                     def concat_impl(a, b):
                                         <source elided>
                                         new_length = a._length + b._length
                                         new_kind = _pick_kind(a._kind, b._kind)
                                         ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<built-in function add>) found for signature:
                   >>> add(Literal[str]('), unicode_type)
                  There are 20 candidate implementations:
                        - Of which 17 did not match due to:
                        Overload of function 'add': File: <numerous>: Line N/A.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match.
                        - Of which 2 did not match due to:
                        Operator Overload in function 'add': File: unknown: Line unknown.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match for registered cases:
                          * (int64, int64) -> int64
                          * (int64, uint64) -> int64
                          * (uint64, int64) -> int64
                          * (uint64, uint64) -> uint64
                          * (float32, float32) -> float32
                          * (float64, float64) -> float64
                          * (complex64, complex64) -> complex64
                          * (complex128, complex128) -> complex128
                        - Of which 1 did not match due to:
                        Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                          With argument(s): '(unicode_type, unicode_type)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             File "numba/cpython/unicode.py", line 1849:
                                     def concat_impl(a, b):
                                         <source elided>
                                         new_length = a._length + b._length
                                         new_kind = _pick_kind(a._kind, b._kind)
                                         ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
                  File "numba/cpython/unicode.py", line 2526:
                  def unicode_repr(s):
                      <source elided>
                      # then recurses somewhere in imports.
                      return lambda s: "'" + s + "'"
                      ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
       - Resolution failure for non-literal arguments:
       None
       During: resolving callee type: BoundFunction((<class 'numba.core.types.misc.UnicodeType'>, '__repr__') for unicode_type)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (986)
       The above exception was the direct cause of the following exception:
       Traceback (most recent call last):
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
           sig = temp.apply(nolitargs, nolitkws)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
           sig = generic(args, kws)
                 ^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
           disp, new_args = self._get_impl(args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
           impl, args = self._build_impl(cache_key, args, kws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
           disp_type.get_call_type(self.context, args, kws)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
           self.dispatcher.get_call_template(args, kws)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
           self.compile(tuple(args))
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
           cres = self._compiler.compile(args, return_type)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
           raise retval
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
           retval = self._compile_core(args, return_type)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
           cres = compiler.compile_extra(self.targetdescr.typing_context,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
           return pipeline.compile_extra(func)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
           return self._compile_bytecode()
                  ^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
           return self._compile_core()
                  ^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
           raise e
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
           pm.run(self.state)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
           raise patched_exception
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
           self._runPass(idx, pass_inst, state)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
           return func(*args, **kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
           mutated |= check(pss.run_pass, internal_state)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
           mangled = func(compiler_state)
                     ^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
           typemap, return_type, calltypes, errs = type_inference_stage(
                                                   ^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
           errs = infer.propagate(raise_errors=raise_errors)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
           raise errors[0]
       numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       - Resolution failure for literal arguments:
       No implementation of function Function(<function unicode_repr at 0x7fdcff7d71a0>) found for signature:
        >>> unicode_repr(unicode_type)
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'unicode_repr': File: numba/cpython/unicode.py: Line 2522.
               With argument(s): '(unicode_type)':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<built-in function add>) found for signature:
               >>> add(Literal[str]('), unicode_type)
              There are 20 candidate implementations:
                    - Of which 17 did not match due to:
                    Overload of function 'add': File: <numerous>: Line N/A.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match.
                    - Of which 2 did not match due to:
                    Operator Overload in function 'add': File: unknown: Line unknown.
                      With argument(s): '(unicode_type, unicode_type)':
                     No match for registered cases:
                      * (int64, int64) -> int64
                      * (int64, uint64) -> int64
                      * (uint64, int64) -> int64
                      * (uint64, uint64) -> uint64
                      * (float32, float32) -> float32
                      * (float64, float64) -> float64
                      * (complex64, complex64) -> complex64
                      * (complex128, complex128) -> complex128
                    - Of which 1 did not match due to:
                    Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                      With argument(s): '(unicode_type, unicode_type)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                      >>> _pick_kind(int32, int32)
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int32, int32)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                     File "numba/cpython/unicode.py", line 1849:
                             def concat_impl(a, b):
                                 <source elided>
                                 new_length = a._length + b._length
                                 new_kind = _pick_kind(a._kind, b._kind)
                                 ^
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
              File "numba/cpython/unicode.py", line 2526:
              def unicode_repr(s):
                  <source elided>
                  # then recurses somewhere in imports.
                  return lambda s: "'" + s + "'"
                  ^
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 704, in __call__
                      self.resolve(typeinfer, typeinfer.typevars, fnty=fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<built-in function add>) found for signature:
                   >>> add(Literal[str]('), unicode_type)
                  There are 20 candidate implementations:
                        - Of which 17 did not match due to:
                        Overload of function 'add': File: <numerous>: Line N/A.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match.
                        - Of which 2 did not match due to:
                        Operator Overload in function 'add': File: unknown: Line unknown.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match for registered cases:
                          * (int64, int64) -> int64
                          * (int64, uint64) -> int64
                          * (uint64, int64) -> int64
                          * (uint64, uint64) -> uint64
                          * (float32, float32) -> float32
                          * (float64, float64) -> float64
                          * (complex64, complex64) -> complex64
                          * (complex128, complex128) -> complex128
                        - Of which 1 did not match due to:
                        Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                          With argument(s): '(unicode_type, unicode_type)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             File "numba/cpython/unicode.py", line 1849:
                                     def concat_impl(a, b):
                                         <source elided>
                                         new_length = a._length + b._length
                                         new_kind = _pick_kind(a._kind, b._kind)
                                         ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<built-in function add>) found for signature:
                   >>> add(Literal[str]('), unicode_type)
                  There are 20 candidate implementations:
                        - Of which 17 did not match due to:
                        Overload of function 'add': File: <numerous>: Line N/A.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match.
                        - Of which 2 did not match due to:
                        Operator Overload in function 'add': File: unknown: Line unknown.
                          With argument(s): '(unicode_type, unicode_type)':
                         No match for registered cases:
                          * (int64, int64) -> int64
                          * (int64, uint64) -> int64
                          * (uint64, int64) -> int64
                          * (uint64, uint64) -> uint64
                          * (float32, float32) -> float32
                          * (float64, float64) -> float64
                          * (complex64, complex64) -> complex64
                          * (complex128, complex128) -> complex128
                        - Of which 1 did not match due to:
                        Overload in function 'unicode_concat': File: numba/cpython/unicode.py: Line 1843.
                          With argument(s): '(unicode_type, unicode_type)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                          >>> _pick_kind(int32, int32)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int32, int32)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                         File "numba/cpython/unicode.py", line 1849:
                                 def concat_impl(a, b):
                                     <source elided>
                                     new_length = a._length + b._length
                                     new_kind = _pick_kind(a._kind, b._kind)
                                     ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _pick_kind at 0x7fdcff7a4b80>) found for signature:
                              >>> _pick_kind(int32, int32)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int32, int32)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _pick_kind at 0x7fdcff7a4b80>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (1849)
                             File "numba/cpython/unicode.py", line 1849:
                                     def concat_impl(a, b):
                                         <source elided>
                                         new_length = a._length + b._length
                                         new_kind = _pick_kind(a._kind, b._kind)
                                         ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: typing of intrinsic-call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (2526)
                  File "numba/cpython/unicode.py", line 2526:
                  def unicode_repr(s):
                      <source elided>
                      # then recurses somewhere in imports.
                      return lambda s: "'" + s + "'"
                      ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
       - Resolution failure for non-literal arguments:
       None
       During: resolving callee type: BoundFunction((<class 'numba.core.types.misc.UnicodeType'>, '__repr__') for unicode_type)
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (986)
       File "numba/cpython/builtins.py", line 986:
           def impl(obj):
               <source elided>
               if hasattr(obj, attr) == True:
                   return getattr(obj, attr)()
                   ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086

During: resolving callee type: Function(<built-in function repr>)
During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_builtins.py (1588)


File "numba/tests/test_builtins.py", line 1588:
        def foo(x):
            return repr(x), x
            ^


----------------------------------------------------------------------
Ran 6 tests in 39.075s

FAILED (errors=1)
