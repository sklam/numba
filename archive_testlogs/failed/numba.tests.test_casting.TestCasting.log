Parallel: 8. Serial: 0
test_0darrayT_to_T (numba.tests.test_casting.TestCasting.test_0darrayT_to_T) ... ERROR
test_array_to_array (numba.tests.test_casting.TestCasting.test_array_to_array)
Make sure this compiles. ... ok
test_array_to_scalar (numba.tests.test_casting.TestCasting.test_array_to_scalar)
Ensure that a TypingError exception is raised if ... ok
test_float_to_complex (numba.tests.test_casting.TestCasting.test_float_to_complex) ... ok
test_float_to_int (numba.tests.test_casting.TestCasting.test_float_to_int) ... ok
test_float_to_unsigned (numba.tests.test_casting.TestCasting.test_float_to_unsigned) ... ok
test_int_to_float (numba.tests.test_casting.TestCasting.test_int_to_float) ... ok
test_optional_to_optional (numba.tests.test_casting.TestCasting.test_optional_to_optional)
Test error due mishandling of Optional to Optional casting ... ok

======================================================================
ERROR: test_0darrayT_to_T (numba.tests.test_casting.TestCasting.test_0darrayT_to_T)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
    constraint(typeinfer)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
    raise last_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
    failures.raise_error()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: No implementation of function Function(<class 'str'>) found for signature:
 
 >>> str([unichr x 3])
 
There are 4 candidate implementations:
  - Of which 2 did not match due to:
  Overload in function 'ol_str_generic': File: numba/cpython/builtins.py: Line 994.
    With argument(s): '([unichr x 3])':
   Rejected as the implementation raised a specific error:
     TypingError: Failed in nopython mode pipeline (step: nopython frontend)
   - Resolution failure for literal arguments:
   No implementation of function Function(<function charseq_str at 0x7f49181b9bc0>) found for signature:
   
    >>> charseq_str([unichr x 3])
   
   There are 2 candidate implementations:
         - Of which 2 did not match due to:
         Overload in function 'charseq_str': File: numba/cpython/charseq.py: Line 600.
           With argument(s): '([unichr x 3])':
          Rejected as the implementation raised a specific error:
            TypingError: Failed in nopython mode pipeline (step: nopython frontend)
          No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
   
           >>> _empty_string(int64, int64, bool)
   
          There are 2 candidate implementations:
                - Of which 2 did not match due to:
                Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                  With argument(s): '(int64, int64, bool)':
                 Rejected as the implementation raised a specific error:
                   TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                 No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                  >>> _kind_to_byte_width(int64)
   
                 There are 2 candidate implementations:
                       - Of which 2 did not match due to:
                       Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                         With argument(s): '(int64)':
                        Rejected as the implementation raised a specific error:
                          TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                            Traceback (most recent call last):
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                sig = temp.apply(nolitargs, nolitkws)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                sig = generic(args, kws)
                                      ^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                disp, new_args = self._get_impl(args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                impl, args = self._build_impl(cache_key, args, kws)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                disp_type.get_call_type(self.context, args, kws)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                self.dispatcher.get_call_template(args, kws)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                self.compile(tuple(args))
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                cres = self._compiler.compile(args, return_type)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                raise retval
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                retval = self._compile_core(args, return_type)
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                cres = compiler.compile_extra(self.targetdescr.typing_context,
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                return pipeline.compile_extra(func)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                return self._compile_bytecode()
                                       ^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                return self._compile_core()
                                       ^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                raise e
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                pm.run(self.state)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                raise patched_exception
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                self._runPass(idx, pass_inst, state)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                return func(*args, **kwargs)
                                       ^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                mutated |= check(pss.run_pass, internal_state)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                mangled = func(compiler_state)
                                          ^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                typemap, return_type, calltypes, errs = type_inference_stage(
                                                                        ^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                infer.build_constraint()
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                self.constrain_statement(inst)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                self.typeof_assign(inst)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                self.typeof_global(inst, inst.target, value)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                typ = self.resolve_value_type(inst, gvar.value)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                raise TypingError(msg, loc=inst.loc)
                            numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                   raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                 During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                 During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
   
   
                 File "numba/cpython/unicode.py", line 278:
                 def _empty_string(kind, length, is_ascii=0):
                     char_width = _kind_to_byte_width(kind)
                     ^
   
                     Traceback (most recent call last):
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                         constraint(typeinfer)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                         self.resolve(typeinfer, typevars, fnty)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                         sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                         return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                         raise last_exception
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                         res = self._resolve_user_function_type(func, args, kws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                         return func.get_call_type(self, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                         failures.raise_error()
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                         raise errors.TypingError(self.format())
                     numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                      >>> _kind_to_byte_width(int64)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                     The above exception was the direct cause of the following exception:
                     Traceback (most recent call last):
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                         sig = temp.apply(nolitargs, nolitkws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                         sig = generic(args, kws)
                               ^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                         disp, new_args = self._get_impl(args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                         impl, args = self._build_impl(cache_key, args, kws)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                         disp_type.get_call_type(self.context, args, kws)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                         self.dispatcher.get_call_template(args, kws)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                         self.compile(tuple(args))
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                         cres = self._compiler.compile(args, return_type)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                         raise retval
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                         retval = self._compile_core(args, return_type)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                         cres = compiler.compile_extra(self.targetdescr.typing_context,
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                         return pipeline.compile_extra(func)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                         return self._compile_bytecode()
                                ^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                         return self._compile_core()
                                ^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                         raise e
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                         pm.run(self.state)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                         raise patched_exception
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                         self._runPass(idx, pass_inst, state)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                         return func(*args, **kwargs)
                                ^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                         mutated |= check(pss.run_pass, internal_state)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                         mangled = func(compiler_state)
                                   ^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                         typemap, return_type, calltypes, errs = type_inference_stage(
                                                                 ^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                         errs = infer.propagate(raise_errors=raise_errors)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                         raise errors[0]
                     numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                      >>> _kind_to_byte_width(int64)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                     File "numba/cpython/unicode.py", line 278:
                     def _empty_string(kind, length, is_ascii=0):
                         char_width = _kind_to_byte_width(kind)
                         ^
            raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
   
          During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
          During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
   
   
          File "numba/cpython/charseq.py", line 608:
              def str_impl(s):
                  <source elided>
                  is_ascii = kind == 1 and s.isascii()
                  result = unicode._empty_string(kind, n, is_ascii)
                  ^
   
              Traceback (most recent call last):
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                  constraint(typeinfer)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                  self.resolve(typeinfer, typevars, fnty)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                  sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                  return self.context.resolve_function_type(fnty, pos_args, kw_args)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                  raise last_exception
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                  res = self._resolve_user_function_type(func, args, kws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                  return func.get_call_type(self, args, kws)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                  failures.raise_error()
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                  raise errors.TypingError(self.format())
              numba.core.errors.TypingError: No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
   
               >>> _empty_string(int64, int64, bool)
   
              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int64, int64, bool)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                      >>> _kind_to_byte_width(int64)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
   
   
                     File "numba/cpython/unicode.py", line 278:
                     def _empty_string(kind, length, is_ascii=0):
                         char_width = _kind_to_byte_width(kind)
                         ^
   
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                          >>> _kind_to_byte_width(int64)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                          >>> _kind_to_byte_width(int64)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
              The above exception was the direct cause of the following exception:
              Traceback (most recent call last):
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                  sig = temp.apply(nolitargs, nolitkws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                  sig = generic(args, kws)
                        ^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                  disp, new_args = self._get_impl(args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                  impl, args = self._build_impl(cache_key, args, kws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                  disp_type.get_call_type(self.context, args, kws)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                  self.dispatcher.get_call_template(args, kws)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                  self.compile(tuple(args))
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                  cres = self._compiler.compile(args, return_type)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                  raise retval
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                  retval = self._compile_core(args, return_type)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                  cres = compiler.compile_extra(self.targetdescr.typing_context,
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                  return pipeline.compile_extra(func)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                  return self._compile_bytecode()
                         ^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                  return self._compile_core()
                         ^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                  raise e
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                  pm.run(self.state)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                  raise patched_exception
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                  self._runPass(idx, pass_inst, state)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                  return func(*args, **kwargs)
                         ^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                  mutated |= check(pss.run_pass, internal_state)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                  mangled = func(compiler_state)
                            ^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                  typemap, return_type, calltypes, errs = type_inference_stage(
                                                          ^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                  errs = infer.propagate(raise_errors=raise_errors)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                  raise errors[0]
              numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
   
               >>> _empty_string(int64, int64, bool)
   
              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int64, int64, bool)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                      >>> _kind_to_byte_width(int64)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
   
   
                     File "numba/cpython/unicode.py", line 278:
                     def _empty_string(kind, length, is_ascii=0):
                         char_width = _kind_to_byte_width(kind)
                         ^
   
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                          >>> _kind_to_byte_width(int64)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                          >>> _kind_to_byte_width(int64)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
              File "numba/cpython/charseq.py", line 608:
                  def str_impl(s):
                      <source elided>
                      is_ascii = kind == 1 and s.isascii()
                      result = unicode._empty_string(kind, n, is_ascii)
                      ^
     raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
   
   - Resolution failure for non-literal arguments:
   None
   
   During: resolving callee type: BoundFunction((<class 'numba.core.types.npytypes.UnicodeCharSeq'>, '__str__') for [unichr x 3])
   During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (999)
   
   
   File "numba/cpython/builtins.py", line 999:
       def impl(object=""):
           <source elided>
           if hasattr(object, attr) == True:
               return getattr(object, attr)()
               ^
   
       Traceback (most recent call last):
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
           constraint(typeinfer)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
           self.resolve(typeinfer, typevars, fnty)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
           sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
           return self.context.resolve_function_type(fnty, pos_args, kw_args)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
           raise last_exception
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
           res = self._resolve_user_function_type(func, args, kws)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
           return func.get_call_type(self, args, kws)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 462, in get_call_type
           raise errors.TypingError(nested_msg('literal', literal_e) +
       numba.core.errors.TypingError: - Resolution failure for literal arguments:
       No implementation of function Function(<function charseq_str at 0x7f49181b9bc0>) found for signature:
        >>> charseq_str([unichr x 3])
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'charseq_str': File: numba/cpython/charseq.py: Line 600.
               With argument(s): '([unichr x 3])':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
               >>> _empty_string(int64, int64, bool)
              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int64, int64, bool)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                      >>> _kind_to_byte_width(int64)
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                     File "numba/cpython/unicode.py", line 278:
                     def _empty_string(kind, length, is_ascii=0):
                         char_width = _kind_to_byte_width(kind)
                         ^
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
              File "numba/cpython/charseq.py", line 608:
                  def str_impl(s):
                      <source elided>
                      is_ascii = kind == 1 and s.isascii()
                      result = unicode._empty_string(kind, n, is_ascii)
                      ^
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                      self.resolve(typeinfer, typevars, fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
                   >>> _empty_string(int64, int64, bool)
                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int64, int64, bool)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             File "numba/cpython/unicode.py", line 278:
                             def _empty_string(kind, length, is_ascii=0):
                                 char_width = _kind_to_byte_width(kind)
                                 ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
                   >>> _empty_string(int64, int64, bool)
                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int64, int64, bool)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             File "numba/cpython/unicode.py", line 278:
                             def _empty_string(kind, length, is_ascii=0):
                                 char_width = _kind_to_byte_width(kind)
                                 ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
                  File "numba/cpython/charseq.py", line 608:
                      def str_impl(s):
                          <source elided>
                          is_ascii = kind == 1 and s.isascii()
                          result = unicode._empty_string(kind, n, is_ascii)
                          ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
       - Resolution failure for non-literal arguments:
       None
       During: resolving callee type: BoundFunction((<class 'numba.core.types.npytypes.UnicodeCharSeq'>, '__str__') for [unichr x 3])
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (999)
       The above exception was the direct cause of the following exception:
       Traceback (most recent call last):
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
           sig = temp.apply(nolitargs, nolitkws)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
           sig = generic(args, kws)
                 ^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
           disp, new_args = self._get_impl(args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
           impl, args = self._build_impl(cache_key, args, kws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
           disp_type.get_call_type(self.context, args, kws)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
           self.dispatcher.get_call_template(args, kws)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
           self.compile(tuple(args))
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
           cres = self._compiler.compile(args, return_type)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
           raise retval
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
           retval = self._compile_core(args, return_type)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
           cres = compiler.compile_extra(self.targetdescr.typing_context,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
           return pipeline.compile_extra(func)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
           return self._compile_bytecode()
                  ^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
           return self._compile_core()
                  ^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
           raise e
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
           pm.run(self.state)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
           raise patched_exception
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
           self._runPass(idx, pass_inst, state)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
           return func(*args, **kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
           mutated |= check(pss.run_pass, internal_state)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
           mangled = func(compiler_state)
                     ^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
           typemap, return_type, calltypes, errs = type_inference_stage(
                                                   ^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
           errs = infer.propagate(raise_errors=raise_errors)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
           raise errors[0]
       numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       - Resolution failure for literal arguments:
       No implementation of function Function(<function charseq_str at 0x7f49181b9bc0>) found for signature:
        >>> charseq_str([unichr x 3])
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'charseq_str': File: numba/cpython/charseq.py: Line 600.
               With argument(s): '([unichr x 3])':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
               >>> _empty_string(int64, int64, bool)
              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int64, int64, bool)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                      >>> _kind_to_byte_width(int64)
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                     File "numba/cpython/unicode.py", line 278:
                     def _empty_string(kind, length, is_ascii=0):
                         char_width = _kind_to_byte_width(kind)
                         ^
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
              File "numba/cpython/charseq.py", line 608:
                  def str_impl(s):
                      <source elided>
                      is_ascii = kind == 1 and s.isascii()
                      result = unicode._empty_string(kind, n, is_ascii)
                      ^
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                      self.resolve(typeinfer, typevars, fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
                   >>> _empty_string(int64, int64, bool)
                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int64, int64, bool)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             File "numba/cpython/unicode.py", line 278:
                             def _empty_string(kind, length, is_ascii=0):
                                 char_width = _kind_to_byte_width(kind)
                                 ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
                   >>> _empty_string(int64, int64, bool)
                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int64, int64, bool)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             File "numba/cpython/unicode.py", line 278:
                             def _empty_string(kind, length, is_ascii=0):
                                 char_width = _kind_to_byte_width(kind)
                                 ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
                  File "numba/cpython/charseq.py", line 608:
                      def str_impl(s):
                          <source elided>
                          is_ascii = kind == 1 and s.isascii()
                          result = unicode._empty_string(kind, n, is_ascii)
                          ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
       - Resolution failure for non-literal arguments:
       None
       During: resolving callee type: BoundFunction((<class 'numba.core.types.npytypes.UnicodeCharSeq'>, '__str__') for [unichr x 3])
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (999)
       File "numba/cpython/builtins.py", line 999:
           def impl(object=""):
               <source elided>
               if hasattr(object, attr) == True:
                   return getattr(object, attr)()
                   ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
  - Of which 2 did not match due to:
  Overload of function 'str': File: numba/experimental/jitclass/overloads.py: Line 158.
    With argument(s): '([unichr x 3])':
   No match.

During: resolving callee type: Function(<class 'str'>)
During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/arrayobj.py (6450)


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_casting.py", line 106, in test_0darrayT_to_T
    self.assertEqual(inner(x), x[()])
                     ^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 468, in _compile_for_args
    error_rewrite(e, 'typing')
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 407, in error_rewrite
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 420, in _compile_for_args
    return_val = self.compile(tuple(argtypes))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
    cres = self._compiler.compile(args, return_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
    raise retval
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
    retval = self._compile_core(args, return_type)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
    cres = compiler.compile_extra(self.targetdescr.typing_context,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 466, in run_pass
    lower.lower()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 187, in lower
    self.lower_normal_function(self.fndesc)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 241, in lower_normal_function
    entry_block_tail = self.lower_function_body()
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 271, in lower_function_body
    self.lower_block(block)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 285, in lower_block
    self.lower_inst(inst)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 463, in lower_inst
    val = self.lower_assign(ty, inst)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 675, in lower_assign
    return self.lower_expr(ty, value)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1211, in lower_expr
    res = self.lower_call(resty, expr)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 940, in lower_call
    res = self._lower_call_normal(fnty, expr, signature)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1182, in _lower_call_normal
    res = impl(self.builder, argvals, self.loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1187, in __call__
    res = self._imp(self._context, builder, self._sig, args, loc=loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1217, in wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py", line 345, in number_constructor
    return context.cast(builder, val, valty, sig.return_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 699, in cast
    return impl(self, builder, fromty, toty, val)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/arrayobj.py", line 6453, in array_to_unichrseq
    res = context.compile_internal(builder, impl, sig, [val])
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 878, in compile_internal
    cres = self.compile_subroutine(builder, impl, sig, locals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 863, in compile_subroutine
    cres = self._compile_subroutine_no_cache(builder, impl, sig,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 834, in _compile_subroutine_no_cache
    cres = compiler.compile_internal(self.typing_context, self,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 844, in compile_internal
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
    typemap, return_type, calltypes, errs = type_inference_stage(
                                            ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
    errs = infer.propagate(raise_errors=raise_errors)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
    raise errors[0]
numba.core.errors.TypingError: Failed in nopython mode pipeline (step: native lowering)
Failed in nopython mode pipeline (step: nopython frontend)
No implementation of function Function(<class 'str'>) found for signature:
 
 >>> str([unichr x 3])
 
There are 4 candidate implementations:
  - Of which 2 did not match due to:
  Overload in function 'ol_str_generic': File: numba/cpython/builtins.py: Line 994.
    With argument(s): '([unichr x 3])':
   Rejected as the implementation raised a specific error:
     TypingError: Failed in nopython mode pipeline (step: nopython frontend)
   - Resolution failure for literal arguments:
   No implementation of function Function(<function charseq_str at 0x7f49181b9bc0>) found for signature:
   
    >>> charseq_str([unichr x 3])
   
   There are 2 candidate implementations:
         - Of which 2 did not match due to:
         Overload in function 'charseq_str': File: numba/cpython/charseq.py: Line 600.
           With argument(s): '([unichr x 3])':
          Rejected as the implementation raised a specific error:
            TypingError: Failed in nopython mode pipeline (step: nopython frontend)
          No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
   
           >>> _empty_string(int64, int64, bool)
   
          There are 2 candidate implementations:
                - Of which 2 did not match due to:
                Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                  With argument(s): '(int64, int64, bool)':
                 Rejected as the implementation raised a specific error:
                   TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                 No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                  >>> _kind_to_byte_width(int64)
   
                 There are 2 candidate implementations:
                       - Of which 2 did not match due to:
                       Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                         With argument(s): '(int64)':
                        Rejected as the implementation raised a specific error:
                          TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                            Traceback (most recent call last):
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                sig = temp.apply(nolitargs, nolitkws)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                sig = generic(args, kws)
                                      ^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                disp, new_args = self._get_impl(args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                impl, args = self._build_impl(cache_key, args, kws)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                disp_type.get_call_type(self.context, args, kws)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                self.dispatcher.get_call_template(args, kws)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                self.compile(tuple(args))
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                cres = self._compiler.compile(args, return_type)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                raise retval
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                retval = self._compile_core(args, return_type)
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                cres = compiler.compile_extra(self.targetdescr.typing_context,
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                return pipeline.compile_extra(func)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                return self._compile_bytecode()
                                       ^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                return self._compile_core()
                                       ^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                raise e
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                pm.run(self.state)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                raise patched_exception
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                self._runPass(idx, pass_inst, state)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                return func(*args, **kwargs)
                                       ^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                mutated |= check(pss.run_pass, internal_state)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                mangled = func(compiler_state)
                                          ^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                typemap, return_type, calltypes, errs = type_inference_stage(
                                                                        ^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                infer.build_constraint()
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                self.constrain_statement(inst)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                self.typeof_assign(inst)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                self.typeof_global(inst, inst.target, value)
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                typ = self.resolve_value_type(inst, gvar.value)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                              File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                raise TypingError(msg, loc=inst.loc)
                            numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                   raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                 During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                 During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
   
   
                 File "numba/cpython/unicode.py", line 278:
                 def _empty_string(kind, length, is_ascii=0):
                     char_width = _kind_to_byte_width(kind)
                     ^
   
                     Traceback (most recent call last):
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                         constraint(typeinfer)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                         self.resolve(typeinfer, typevars, fnty)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                         sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                         return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                         raise last_exception
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                         res = self._resolve_user_function_type(func, args, kws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                         return func.get_call_type(self, args, kws)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                         failures.raise_error()
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                         raise errors.TypingError(self.format())
                     numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                      >>> _kind_to_byte_width(int64)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                     The above exception was the direct cause of the following exception:
                     Traceback (most recent call last):
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                         sig = temp.apply(nolitargs, nolitkws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                         sig = generic(args, kws)
                               ^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                         disp, new_args = self._get_impl(args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                         impl, args = self._build_impl(cache_key, args, kws)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                         disp_type.get_call_type(self.context, args, kws)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                         self.dispatcher.get_call_template(args, kws)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                         self.compile(tuple(args))
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                         cres = self._compiler.compile(args, return_type)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                         raise retval
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                         retval = self._compile_core(args, return_type)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                         cres = compiler.compile_extra(self.targetdescr.typing_context,
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                         return pipeline.compile_extra(func)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                         return self._compile_bytecode()
                                ^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                         return self._compile_core()
                                ^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                         raise e
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                         pm.run(self.state)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                         raise patched_exception
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                         self._runPass(idx, pass_inst, state)
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                         return func(*args, **kwargs)
                                ^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                         mutated |= check(pss.run_pass, internal_state)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                         mangled = func(compiler_state)
                                   ^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                         typemap, return_type, calltypes, errs = type_inference_stage(
                                                                 ^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                         errs = infer.propagate(raise_errors=raise_errors)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                         raise errors[0]
                     numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                      >>> _kind_to_byte_width(int64)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                     File "numba/cpython/unicode.py", line 278:
                     def _empty_string(kind, length, is_ascii=0):
                         char_width = _kind_to_byte_width(kind)
                         ^
            raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
   
          During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
          During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
   
   
          File "numba/cpython/charseq.py", line 608:
              def str_impl(s):
                  <source elided>
                  is_ascii = kind == 1 and s.isascii()
                  result = unicode._empty_string(kind, n, is_ascii)
                  ^
   
              Traceback (most recent call last):
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                  constraint(typeinfer)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                  self.resolve(typeinfer, typevars, fnty)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                  sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                  return self.context.resolve_function_type(fnty, pos_args, kw_args)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                  raise last_exception
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                  res = self._resolve_user_function_type(func, args, kws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                  return func.get_call_type(self, args, kws)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                  failures.raise_error()
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                  raise errors.TypingError(self.format())
              numba.core.errors.TypingError: No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
   
               >>> _empty_string(int64, int64, bool)
   
              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int64, int64, bool)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                      >>> _kind_to_byte_width(int64)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
   
   
                     File "numba/cpython/unicode.py", line 278:
                     def _empty_string(kind, length, is_ascii=0):
                         char_width = _kind_to_byte_width(kind)
                         ^
   
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                          >>> _kind_to_byte_width(int64)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                          >>> _kind_to_byte_width(int64)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
              The above exception was the direct cause of the following exception:
              Traceback (most recent call last):
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                  sig = temp.apply(nolitargs, nolitkws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                  sig = generic(args, kws)
                        ^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                  disp, new_args = self._get_impl(args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                  impl, args = self._build_impl(cache_key, args, kws)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                  disp_type.get_call_type(self.context, args, kws)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                  self.dispatcher.get_call_template(args, kws)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                  self.compile(tuple(args))
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                  cres = self._compiler.compile(args, return_type)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                  raise retval
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                  retval = self._compile_core(args, return_type)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                  cres = compiler.compile_extra(self.targetdescr.typing_context,
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                  return pipeline.compile_extra(func)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                  return self._compile_bytecode()
                         ^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                  return self._compile_core()
                         ^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                  raise e
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                  pm.run(self.state)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                  raise patched_exception
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                  self._runPass(idx, pass_inst, state)
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                  return func(*args, **kwargs)
                         ^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                  mutated |= check(pss.run_pass, internal_state)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                  mangled = func(compiler_state)
                            ^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                  typemap, return_type, calltypes, errs = type_inference_stage(
                                                          ^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                  errs = infer.propagate(raise_errors=raise_errors)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                  raise errors[0]
              numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
   
               >>> _empty_string(int64, int64, bool)
   
              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int64, int64, bool)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                      >>> _kind_to_byte_width(int64)
   
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
   
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
   
   
                     File "numba/cpython/unicode.py", line 278:
                     def _empty_string(kind, length, is_ascii=0):
                         char_width = _kind_to_byte_width(kind)
                         ^
   
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                          >>> _kind_to_byte_width(int64)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
   
                          >>> _kind_to_byte_width(int64)
   
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
              File "numba/cpython/charseq.py", line 608:
                  def str_impl(s):
                      <source elided>
                      is_ascii = kind == 1 and s.isascii()
                      result = unicode._empty_string(kind, n, is_ascii)
                      ^
     raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
   
   - Resolution failure for non-literal arguments:
   None
   
   During: resolving callee type: BoundFunction((<class 'numba.core.types.npytypes.UnicodeCharSeq'>, '__str__') for [unichr x 3])
   During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (999)
   
   
   File "numba/cpython/builtins.py", line 999:
       def impl(object=""):
           <source elided>
           if hasattr(object, attr) == True:
               return getattr(object, attr)()
               ^
   
       Traceback (most recent call last):
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
           constraint(typeinfer)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
           self.resolve(typeinfer, typevars, fnty)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
           sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
           return self.context.resolve_function_type(fnty, pos_args, kw_args)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
           raise last_exception
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
           res = self._resolve_user_function_type(func, args, kws)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
           return func.get_call_type(self, args, kws)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 462, in get_call_type
           raise errors.TypingError(nested_msg('literal', literal_e) +
       numba.core.errors.TypingError: - Resolution failure for literal arguments:
       No implementation of function Function(<function charseq_str at 0x7f49181b9bc0>) found for signature:
        >>> charseq_str([unichr x 3])
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'charseq_str': File: numba/cpython/charseq.py: Line 600.
               With argument(s): '([unichr x 3])':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
               >>> _empty_string(int64, int64, bool)
              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int64, int64, bool)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                      >>> _kind_to_byte_width(int64)
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                     File "numba/cpython/unicode.py", line 278:
                     def _empty_string(kind, length, is_ascii=0):
                         char_width = _kind_to_byte_width(kind)
                         ^
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
              File "numba/cpython/charseq.py", line 608:
                  def str_impl(s):
                      <source elided>
                      is_ascii = kind == 1 and s.isascii()
                      result = unicode._empty_string(kind, n, is_ascii)
                      ^
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                      self.resolve(typeinfer, typevars, fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
                   >>> _empty_string(int64, int64, bool)
                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int64, int64, bool)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             File "numba/cpython/unicode.py", line 278:
                             def _empty_string(kind, length, is_ascii=0):
                                 char_width = _kind_to_byte_width(kind)
                                 ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
                   >>> _empty_string(int64, int64, bool)
                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int64, int64, bool)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             File "numba/cpython/unicode.py", line 278:
                             def _empty_string(kind, length, is_ascii=0):
                                 char_width = _kind_to_byte_width(kind)
                                 ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
                  File "numba/cpython/charseq.py", line 608:
                      def str_impl(s):
                          <source elided>
                          is_ascii = kind == 1 and s.isascii()
                          result = unicode._empty_string(kind, n, is_ascii)
                          ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
       - Resolution failure for non-literal arguments:
       None
       During: resolving callee type: BoundFunction((<class 'numba.core.types.npytypes.UnicodeCharSeq'>, '__str__') for [unichr x 3])
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (999)
       The above exception was the direct cause of the following exception:
       Traceback (most recent call last):
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
           sig = temp.apply(nolitargs, nolitkws)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
           sig = generic(args, kws)
                 ^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
           disp, new_args = self._get_impl(args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
           impl, args = self._build_impl(cache_key, args, kws)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
           disp_type.get_call_type(self.context, args, kws)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
           self.dispatcher.get_call_template(args, kws)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
           self.compile(tuple(args))
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
           cres = self._compiler.compile(args, return_type)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
           raise retval
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
           retval = self._compile_core(args, return_type)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
           cres = compiler.compile_extra(self.targetdescr.typing_context,
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
           return pipeline.compile_extra(func)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
           return self._compile_bytecode()
                  ^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
           return self._compile_core()
                  ^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
           raise e
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
           pm.run(self.state)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
           raise patched_exception
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
           self._runPass(idx, pass_inst, state)
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
           return func(*args, **kwargs)
                  ^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
           mutated |= check(pss.run_pass, internal_state)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
           mangled = func(compiler_state)
                     ^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
           typemap, return_type, calltypes, errs = type_inference_stage(
                                                   ^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
           errs = infer.propagate(raise_errors=raise_errors)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
         File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
           raise errors[0]
       numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
       - Resolution failure for literal arguments:
       No implementation of function Function(<function charseq_str at 0x7f49181b9bc0>) found for signature:
        >>> charseq_str([unichr x 3])
       There are 2 candidate implementations:
             - Of which 2 did not match due to:
             Overload in function 'charseq_str': File: numba/cpython/charseq.py: Line 600.
               With argument(s): '([unichr x 3])':
              Rejected as the implementation raised a specific error:
                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
              No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
               >>> _empty_string(int64, int64, bool)
              There are 2 candidate implementations:
                    - Of which 2 did not match due to:
                    Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                      With argument(s): '(int64, int64, bool)':
                     Rejected as the implementation raised a specific error:
                       TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                     No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                      >>> _kind_to_byte_width(int64)
                     There are 2 candidate implementations:
                           - Of which 2 did not match due to:
                           Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                             With argument(s): '(int64)':
                            Rejected as the implementation raised a specific error:
                              TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                            NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                Traceback (most recent call last):
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                    sig = temp.apply(nolitargs, nolitkws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                    sig = generic(args, kws)
                                          ^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                    disp, new_args = self._get_impl(args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                    impl, args = self._build_impl(cache_key, args, kws)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                    disp_type.get_call_type(self.context, args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                    self.dispatcher.get_call_template(args, kws)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                    self.compile(tuple(args))
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                    cres = self._compiler.compile(args, return_type)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                    raise retval
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                    retval = self._compile_core(args, return_type)
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                    cres = compiler.compile_extra(self.targetdescr.typing_context,
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                    return pipeline.compile_extra(func)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                    return self._compile_bytecode()
                                           ^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                    return self._compile_core()
                                           ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                    raise e
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                    pm.run(self.state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                    raise patched_exception
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                    self._runPass(idx, pass_inst, state)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                    return func(*args, **kwargs)
                                           ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                    mutated |= check(pss.run_pass, internal_state)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                    mangled = func(compiler_state)
                                              ^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                    typemap, return_type, calltypes, errs = type_inference_stage(
                                                                            ^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                    infer.build_constraint()
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                    self.constrain_statement(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                    self.typeof_assign(inst)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                    self.typeof_global(inst, inst.target, value)
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                    typ = self.resolve_value_type(inst, gvar.value)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                    raise TypingError(msg, loc=inst.loc)
                                numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                       raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                     During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                     During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                     File "numba/cpython/unicode.py", line 278:
                     def _empty_string(kind, length, is_ascii=0):
                         char_width = _kind_to_byte_width(kind)
                         ^
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                             constraint(typeinfer)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                             self.resolve(typeinfer, typevars, fnty)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                             sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                             return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                             raise last_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                             res = self._resolve_user_function_type(func, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                             return func.get_call_type(self, args, kws)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                             failures.raise_error()
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                             raise errors.TypingError(self.format())
                         numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         The above exception was the direct cause of the following exception:
                         Traceback (most recent call last):
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                             sig = temp.apply(nolitargs, nolitkws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                             sig = generic(args, kws)
                                   ^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                             disp, new_args = self._get_impl(args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                             impl, args = self._build_impl(cache_key, args, kws)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                             disp_type.get_call_type(self.context, args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                             self.dispatcher.get_call_template(args, kws)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                             self.compile(tuple(args))
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                             cres = self._compiler.compile(args, return_type)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                             raise retval
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                             retval = self._compile_core(args, return_type)
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                             cres = compiler.compile_extra(self.targetdescr.typing_context,
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                             return pipeline.compile_extra(func)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                             return self._compile_bytecode()
                                    ^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                             return self._compile_core()
                                    ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                             raise e
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                             pm.run(self.state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                             raise patched_exception
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                             self._runPass(idx, pass_inst, state)
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                             return func(*args, **kwargs)
                                    ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                             mutated |= check(pss.run_pass, internal_state)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                             mangled = func(compiler_state)
                                       ^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                             typemap, return_type, calltypes, errs = type_inference_stage(
                                                                     ^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                             errs = infer.propagate(raise_errors=raise_errors)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                           File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                             raise errors[0]
                         numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
              During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
              During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
              File "numba/cpython/charseq.py", line 608:
                  def str_impl(s):
                      <source elided>
                      is_ascii = kind == 1 and s.isascii()
                      result = unicode._empty_string(kind, n, is_ascii)
                      ^
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                      constraint(typeinfer)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                      self.resolve(typeinfer, typevars, fnty)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                      sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                      return self.context.resolve_function_type(fnty, pos_args, kw_args)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                      raise last_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                      res = self._resolve_user_function_type(func, args, kws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                      return func.get_call_type(self, args, kws)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                      failures.raise_error()
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                      raise errors.TypingError(self.format())
                  numba.core.errors.TypingError: No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
                   >>> _empty_string(int64, int64, bool)
                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int64, int64, bool)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             File "numba/cpython/unicode.py", line 278:
                             def _empty_string(kind, length, is_ascii=0):
                                 char_width = _kind_to_byte_width(kind)
                                 ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
                  The above exception was the direct cause of the following exception:
                  Traceback (most recent call last):
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                      sig = temp.apply(nolitargs, nolitkws)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                      sig = generic(args, kws)
                            ^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                      disp, new_args = self._get_impl(args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                      impl, args = self._build_impl(cache_key, args, kws)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                      disp_type.get_call_type(self.context, args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                      self.dispatcher.get_call_template(args, kws)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                      self.compile(tuple(args))
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                      cres = self._compiler.compile(args, return_type)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                      raise retval
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                      retval = self._compile_core(args, return_type)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                      cres = compiler.compile_extra(self.targetdescr.typing_context,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                      return pipeline.compile_extra(func)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                      return self._compile_bytecode()
                             ^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                      return self._compile_core()
                             ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                      raise e
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                      pm.run(self.state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                      raise patched_exception
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                      self._runPass(idx, pass_inst, state)
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                      return func(*args, **kwargs)
                             ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                      mutated |= check(pss.run_pass, internal_state)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                      mangled = func(compiler_state)
                                ^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                      typemap, return_type, calltypes, errs = type_inference_stage(
                                                              ^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                      errs = infer.propagate(raise_errors=raise_errors)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                      raise errors[0]
                  numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                  No implementation of function Function(<function _empty_string at 0x7f49183493a0>) found for signature:
                   >>> _empty_string(int64, int64, bool)
                  There are 2 candidate implementations:
                        - Of which 2 did not match due to:
                        Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                          With argument(s): '(int64, int64, bool)':
                         Rejected as the implementation raised a specific error:
                           TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                         No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                          >>> _kind_to_byte_width(int64)
                         There are 2 candidate implementations:
                               - Of which 2 did not match due to:
                               Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                 With argument(s): '(int64)':
                                Rejected as the implementation raised a specific error:
                                  TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                    Traceback (most recent call last):
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                        sig = temp.apply(nolitargs, nolitkws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                        sig = generic(args, kws)
                                              ^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                        disp, new_args = self._get_impl(args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                        impl, args = self._build_impl(cache_key, args, kws)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                        disp_type.get_call_type(self.context, args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                        self.dispatcher.get_call_template(args, kws)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                        self.compile(tuple(args))
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                        cres = self._compiler.compile(args, return_type)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                        raise retval
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                        retval = self._compile_core(args, return_type)
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                        cres = compiler.compile_extra(self.targetdescr.typing_context,
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                        return pipeline.compile_extra(func)
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                        return self._compile_bytecode()
                                               ^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                        return self._compile_core()
                                               ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                        raise e
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                        pm.run(self.state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                        raise patched_exception
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                        self._runPass(idx, pass_inst, state)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                        return func(*args, **kwargs)
                                               ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                        mutated |= check(pss.run_pass, internal_state)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                        mangled = func(compiler_state)
                                                  ^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                        typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                ^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                        infer.build_constraint()
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                        self.constrain_statement(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                        self.typeof_assign(inst)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                        self.typeof_global(inst, inst.target, value)
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                        typ = self.resolve_value_type(inst, gvar.value)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                      File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                        raise TypingError(msg, loc=inst.loc)
                                    numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                           raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                         During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                         During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                         File "numba/cpython/unicode.py", line 278:
                         def _empty_string(kind, length, is_ascii=0):
                             char_width = _kind_to_byte_width(kind)
                             ^
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 155, in propagate
                                 constraint(typeinfer)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 578, in __call__
                                 self.resolve(typeinfer, typevars, fnty)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 601, in resolve
                                 sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1557, in resolve_call
                                 return self.context.resolve_function_type(fnty, pos_args, kw_args)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 213, in resolve_function_type
                                 raise last_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 196, in resolve_function_type
                                 res = self._resolve_user_function_type(func, args, kws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/context.py", line 248, in _resolve_user_function_type
                                 return func.get_call_type(self, args, kws)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 331, in get_call_type
                                 failures.raise_error()
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 227, in raise_error
                                 raise errors.TypingError(self.format())
                             numba.core.errors.TypingError: No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             The above exception was the direct cause of the following exception:
                             Traceback (most recent call last):
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                 sig = temp.apply(nolitargs, nolitkws)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                 sig = generic(args, kws)
                                       ^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                 disp, new_args = self._get_impl(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                 impl, args = self._build_impl(cache_key, args, kws)
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                 disp_type.get_call_type(self.context, args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                 self.dispatcher.get_call_template(args, kws)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                 self.compile(tuple(args))
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                 cres = self._compiler.compile(args, return_type)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                 raise retval
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                 retval = self._compile_core(args, return_type)
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                 cres = compiler.compile_extra(self.targetdescr.typing_context,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                 return pipeline.compile_extra(func)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                 return self._compile_bytecode()
                                        ^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                 return self._compile_core()
                                        ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                 raise e
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                 pm.run(self.state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                 raise patched_exception
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                 self._runPass(idx, pass_inst, state)
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                 return func(*args, **kwargs)
                                        ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                 mutated |= check(pss.run_pass, internal_state)
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                 mangled = func(compiler_state)
                                           ^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                 typemap, return_type, calltypes, errs = type_inference_stage(
                                                                         ^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 91, in type_inference_stage
                                 errs = infer.propagate(raise_errors=raise_errors)
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                               File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1086, in propagate
                                 raise errors[0]
                             numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                             No implementation of function Function(<function _kind_to_byte_width at 0x7f4918349b20>) found for signature:
                              >>> _kind_to_byte_width(int64)
                             There are 2 candidate implementations:
                                   - Of which 2 did not match due to:
                                   Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
                                     With argument(s): '(int64)':
                                    Rejected as the implementation raised a specific error:
                                      TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                    NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                                        Traceback (most recent call last):
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 308, in get_call_type
                                            sig = temp.apply(nolitargs, nolitkws)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 351, in apply
                                            sig = generic(args, kws)
                                                  ^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 614, in generic
                                            disp, new_args = self._get_impl(args, kws)
                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 713, in _get_impl
                                            impl, args = self._build_impl(cache_key, args, kws)
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typing/templates.py", line 817, in _build_impl
                                            disp_type.get_call_type(self.context, args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/types/functions.py", line 541, in get_call_type
                                            self.dispatcher.get_call_template(args, kws)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 363, in get_call_template
                                            self.compile(tuple(args))
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
                                            cres = self._compiler.compile(args, return_type)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 129, in compile
                                            raise retval
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
                                            retval = self._compile_core(args, return_type)
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
                                            cres = compiler.compile_extra(self.targetdescr.typing_context,
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
                                            return pipeline.compile_extra(func)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
                                            return self._compile_bytecode()
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
                                            return self._compile_core()
                                                   ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
                                            raise e
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
                                            pm.run(self.state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
                                            raise patched_exception
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
                                            self._runPass(idx, pass_inst, state)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
                                            return func(*args, **kwargs)
                                                   ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
                                            mutated |= check(pss.run_pass, internal_state)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
                                            mangled = func(compiler_state)
                                                      ^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 110, in run_pass
                                            typemap, return_type, calltypes, errs = type_inference_stage(
                                                                                    ^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 89, in type_inference_stage
                                            infer.build_constraint()
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1039, in build_constraint
                                            self.constrain_statement(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1386, in constrain_statement
                                            self.typeof_assign(inst)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1461, in typeof_assign
                                            self.typeof_global(inst, inst.target, value)
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1561, in typeof_global
                                            typ = self.resolve_value_type(inst, gvar.value)
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                          File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py", line 1482, in resolve_value_type
                                            raise TypingError(msg, loc=inst.loc)
                                        numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
                                        NameError: name 'PY_UNICODE_WCHAR_KIND' is not defined
                               raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1482
                             During: resolving callee type: Function(<function _kind_to_byte_width at 0x7f4918349b20>)
                             During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/unicode.py (278)
                             File "numba/cpython/unicode.py", line 278:
                             def _empty_string(kind, length, is_ascii=0):
                                 char_width = _kind_to_byte_width(kind)
                                 ^
                    raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
                  During: resolving callee type: Function(<function _empty_string at 0x7f49183493a0>)
                  During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/charseq.py (608)
                  File "numba/cpython/charseq.py", line 608:
                      def str_impl(s):
                          <source elided>
                          is_ascii = kind == 1 and s.isascii()
                          result = unicode._empty_string(kind, n, is_ascii)
                          ^
         raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
       - Resolution failure for non-literal arguments:
       None
       During: resolving callee type: BoundFunction((<class 'numba.core.types.npytypes.UnicodeCharSeq'>, '__str__') for [unichr x 3])
       During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/builtins.py (999)
       File "numba/cpython/builtins.py", line 999:
           def impl(object=""):
               <source elided>
               if hasattr(object, attr) == True:
                   return getattr(object, attr)()
                   ^
  raised from /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typeinfer.py:1086
  - Of which 2 did not match due to:
  Overload of function 'str': File: numba/experimental/jitclass/overloads.py: Line 158.
    With argument(s): '([unichr x 3])':
   No match.

During: resolving callee type: Function(<class 'str'>)
During: typing of call at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/arrayobj.py (6450)


File "numba/np/arrayobj.py", line 6450:
    def impl(a):
        return str(a[()])
        ^

During: lowering "$48call.5 = call $26load_attr.2(x, func=$26load_attr.2, args=[Var(x, test_casting.py:88)], kws=(), vararg=None, varkwarg=None, target=None)" at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_casting.py (90)

----------------------------------------------------------------------
Ran 8 tests in 24.086s

FAILED (errors=1)
