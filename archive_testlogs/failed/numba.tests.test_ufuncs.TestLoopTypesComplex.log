Parallel: 1007. Serial: 0
test_absolute_?_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_?_?) ... ok
test_absolute_B_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_B_B) ... ok
test_absolute_D_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_D_d) ... ok
test_absolute_F_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_F_f) ... ok
test_absolute_G_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_G_g) ... ok
test_absolute_H_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_H_H) ... ok
test_absolute_I_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_I_I) ... ok
test_absolute_L_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_L_L) ... ok
test_absolute_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_O_O) ... ok
test_absolute_Q_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_Q_Q) ... ok
test_absolute_b_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_b_b) ... ok
test_absolute_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_d_d) ... ok
test_absolute_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_e_e) ... ok
test_absolute_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_f_f) ... ok
test_absolute_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_g_g) ... ok
test_absolute_h_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_h_h) ... ok
test_absolute_i_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_i_i) ... ok
test_absolute_l_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_l_l) ... ok
test_absolute_m_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_m_m) ... ok
test_absolute_q_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_absolute_q_q) ... ok
test_add_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_??_?) ... ok
test_add_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_BB_B) ... ok
test_add_DD_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_DD_D) ... ok
test_add_FF_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_FF_F) ... ok
test_add_GG_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_GG_G) ... ok
test_add_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_HH_H) ... ok
test_add_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_II_I) ... ok
test_add_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_LL_L) ... ok
test_add_Mm_M (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_Mm_M) ... ok
test_add_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_OO_O) ... ok
test_add_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_QQ_Q) ... ok
test_add_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_bb_b) ... ok
test_add_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_dd_d) ... ok
test_add_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_ee_e) ... ok
test_add_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_ff_f) ... ok
test_add_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_gg_g) ... ok
test_add_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_hh_h) ... ok
test_add_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_ii_i) ... ok
test_add_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_ll_l) ... ok
test_add_mM_M (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_mM_M) ... ok
test_add_mm_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_mm_m) ... ok
test_add_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_add_qq_q) ... ok
test_arccos_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccos_D_D) ... ok
test_arccos_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccos_F_F) ... ok
test_arccos_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccos_G_G) ... ok
test_arccos_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccos_O_O) ... ok
test_arccos_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccos_d_d) ... ok
test_arccos_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccos_e_e) ... ok
test_arccos_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccos_f_f) ... ok
test_arccos_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccos_g_g) ... ok
test_arccosh_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccosh_D_D) ... ok
test_arccosh_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccosh_F_F) ... ok
test_arccosh_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccosh_G_G) ... ok
test_arccosh_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccosh_O_O) ... ok
test_arccosh_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccosh_d_d) ... ok
test_arccosh_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccosh_e_e) ... ok
test_arccosh_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccosh_f_f) ... ok
test_arccosh_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arccosh_g_g) ... ok
test_arcsin_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsin_D_D) ... ok
test_arcsin_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsin_F_F) ... ok
test_arcsin_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsin_G_G) ... ok
test_arcsin_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsin_O_O) ... ok
test_arcsin_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsin_d_d) ... ok
test_arcsin_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsin_e_e) ... ok
test_arcsin_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsin_f_f) ... ok
test_arcsin_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsin_g_g) ... ok
test_arcsinh_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsinh_D_D) ... ok
test_arcsinh_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsinh_F_F) ... ok
test_arcsinh_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsinh_G_G) ... ok
test_arcsinh_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsinh_O_O) ... ok
test_arcsinh_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsinh_d_d) ... ok
test_arcsinh_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsinh_e_e) ... ok
test_arcsinh_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsinh_f_f) ... ok
test_arcsinh_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arcsinh_g_g) ... ok
test_arctan2_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan2_OO_O) ... ok
test_arctan2_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan2_dd_d) ... ok
test_arctan2_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan2_ee_e) ... ok
test_arctan2_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan2_ff_f) ... ok
test_arctan2_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan2_gg_g) ... ok
test_arctan_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan_D_D) ... ERROR
test_arctan_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan_F_F) ... ERROR
test_arctan_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan_G_G) ... ok
test_arctan_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan_O_O) ... ok
test_arctan_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan_d_d) ... ok
test_arctan_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan_e_e) ... ok
test_arctan_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan_f_f) ... ok
test_arctan_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan_g_g) ... ok
test_arctanh_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctanh_D_D) ... ERROR
test_arctanh_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctanh_F_F) ... ERROR
test_arctanh_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctanh_G_G) ... ok
test_arctanh_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctanh_O_O) ... ok
test_arctanh_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctanh_d_d) ... ok
test_arctanh_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctanh_e_e) ... ok
test_arctanh_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctanh_f_f) ... ok
test_arctanh_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctanh_g_g) ... ok
test_bitwise_and_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_??_?) ... ok
test_bitwise_and_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_BB_B) ... ok
test_bitwise_and_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_HH_H) ... ok
test_bitwise_and_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_II_I) ... ok
test_bitwise_and_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_LL_L) ... ok
test_bitwise_and_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_OO_O) ... ok
test_bitwise_and_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_QQ_Q) ... ok
test_bitwise_and_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_bb_b) ... ok
test_bitwise_and_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_hh_h) ... ok
test_bitwise_and_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_ii_i) ... ok
test_bitwise_and_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_ll_l) ... ok
test_bitwise_and_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_and_qq_q) ... ok
test_bitwise_or_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_??_?) ... ok
test_bitwise_or_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_BB_B) ... ok
test_bitwise_or_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_HH_H) ... ok
test_bitwise_or_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_II_I) ... ok
test_bitwise_or_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_LL_L) ... ok
test_bitwise_or_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_OO_O) ... ok
test_bitwise_or_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_QQ_Q) ... ok
test_bitwise_or_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_bb_b) ... ok
test_bitwise_or_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_hh_h) ... ok
test_bitwise_or_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_ii_i) ... ok
test_bitwise_or_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_ll_l) ... ok
test_bitwise_or_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_or_qq_q) ... ok
test_bitwise_xor_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_??_?) ... ok
test_bitwise_xor_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_BB_B) ... ok
test_bitwise_xor_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_HH_H) ... ok
test_bitwise_xor_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_II_I) ... ok
test_bitwise_xor_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_LL_L) ... ok
test_bitwise_xor_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_OO_O) ... ok
test_bitwise_xor_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_QQ_Q) ... ok
test_bitwise_xor_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_bb_b) ... ok
test_bitwise_xor_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_hh_h) ... ok
test_bitwise_xor_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_ii_i) ... ok
test_bitwise_xor_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_ll_l) ... ok
test_bitwise_xor_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_bitwise_xor_qq_q) ... ok
test_cbrt_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cbrt_O_O) ... ok
test_cbrt_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cbrt_d_d) ... ok
test_cbrt_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cbrt_e_e) ... ok
test_cbrt_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cbrt_f_f) ... ok
test_cbrt_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cbrt_g_g) ... ok
test_ceil_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ceil_O_O) ... ok
test_ceil_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ceil_d_d) ... ok
test_ceil_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ceil_e_e) ... ok
test_ceil_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ceil_f_f) ... ok
test_ceil_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ceil_g_g) ... ok
test_conjugate_B_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_B_B) ... ok
test_conjugate_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_D_D) ... ok
test_conjugate_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_F_F) ... ok
test_conjugate_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_G_G) ... ok
test_conjugate_H_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_H_H) ... ok
test_conjugate_I_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_I_I) ... ok
test_conjugate_L_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_L_L) ... ok
test_conjugate_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_O_O) ... ok
test_conjugate_Q_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_Q_Q) ... ok
test_conjugate_b_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_b_b) ... ok
test_conjugate_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_d_d) ... ok
test_conjugate_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_e_e) ... ok
test_conjugate_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_f_f) ... ok
test_conjugate_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_g_g) ... ok
test_conjugate_h_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_h_h) ... ok
test_conjugate_i_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_i_i) ... ok
test_conjugate_l_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_l_l) ... ok
test_conjugate_q_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_conjugate_q_q) ... ok
test_copysign_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_copysign_dd_d) ... ok
test_copysign_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_copysign_ee_e) ... ok
test_copysign_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_copysign_ff_f) ... ok
test_copysign_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_copysign_gg_g) ... ok
test_cos_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cos_D_D) ... ok
test_cos_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cos_F_F) ... ok
test_cos_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cos_G_G) ... ok
test_cos_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cos_O_O) ... ok
test_cos_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cos_d_d) ... ok
test_cos_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cos_e_e) ... ok
test_cos_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cos_f_f) ... ok
test_cos_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cos_g_g) ... ok
test_cosh_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cosh_D_D) ... ok
test_cosh_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cosh_F_F) ... ok
test_cosh_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cosh_G_G) ... ok
test_cosh_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cosh_O_O) ... ok
test_cosh_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cosh_d_d) ... ok
test_cosh_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cosh_e_e) ... ok
test_cosh_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cosh_f_f) ... ok
test_cosh_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_cosh_g_g) ... ok
test_deg2rad_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_deg2rad_O_O) ... ok
test_deg2rad_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_deg2rad_d_d) ... ok
test_deg2rad_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_deg2rad_e_e) ... ok
test_deg2rad_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_deg2rad_f_f) ... ok
test_deg2rad_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_deg2rad_g_g) ... ok
test_degrees_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_degrees_O_O) ... ok
test_degrees_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_degrees_d_d) ... ok
test_degrees_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_degrees_e_e) ... ok
test_degrees_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_degrees_f_f) ... ok
test_degrees_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_degrees_g_g) ... ok
test_divide_DD_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divide_DD_D) ... ok
test_divide_FF_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divide_FF_F) ... ok
test_divide_GG_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divide_GG_G) ... ok
test_divide_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divide_OO_O) ... ok
test_divide_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divide_dd_d) ... ok
test_divide_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divide_ee_e) ... ok
test_divide_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divide_ff_f) ... ok
test_divide_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divide_gg_g) ... ok
test_divide_md_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divide_md_m) ... ok
test_divide_mm_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divide_mm_d) ... ok
test_divide_mq_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divide_mq_m) ... ok
test_divmod_BB_BB (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_BB_BB) ... ok
test_divmod_HH_HH (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_HH_HH) ... ok
test_divmod_II_II (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_II_II) ... ok
test_divmod_LL_LL (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_LL_LL) ... ok
test_divmod_QQ_QQ (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_QQ_QQ) ... ok
test_divmod_bb_bb (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_bb_bb) ... ok
test_divmod_dd_dd (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_dd_dd) ... ok
test_divmod_ee_ee (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_ee_ee) ... ok
test_divmod_ff_ff (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_ff_ff) ... ok
test_divmod_gg_gg (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_gg_gg) ... ok
test_divmod_hh_hh (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_hh_hh) ... ok
test_divmod_ii_ii (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_ii_ii) ... ok
test_divmod_ll_ll (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_ll_ll) ... ok
test_divmod_mm_qm (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_mm_qm) ... ok
test_divmod_qq_qq (numba.tests.test_ufuncs.TestLoopTypesComplex.test_divmod_qq_qq) ... ok
test_equal_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_??_?) ... ok
test_equal_BB_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_BB_?) ... ok
test_equal_DD_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_DD_?) ... ok
test_equal_FF_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_FF_?) ... ok
test_equal_GG_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_GG_?) ... ok
test_equal_HH_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_HH_?) ... ok
test_equal_II_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_II_?) ... ok
test_equal_LL_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_LL_?) ... ok
test_equal_MM_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_MM_?) ... ok
test_equal_OO_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_OO_?) ... ok
test_equal_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_OO_O) ... ok
test_equal_QQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_QQ_?) ... ok
test_equal_Qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_Qq_?) ... ok
test_equal_bb_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_bb_?) ... ok
test_equal_dd_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_dd_?) ... ok
test_equal_ee_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_ee_?) ... ok
test_equal_ff_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_ff_?) ... ok
test_equal_gg_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_gg_?) ... ok
test_equal_hh_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_hh_?) ... ok
test_equal_ii_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_ii_?) ... ok
test_equal_ll_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_ll_?) ... ok
test_equal_mm_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_mm_?) ... ok
test_equal_qQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_qQ_?) ... ok
test_equal_qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_equal_qq_?) ... ok
test_exp2_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp2_D_D) ... ok
test_exp2_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp2_F_F) ... ok
test_exp2_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp2_G_G) ... ok
test_exp2_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp2_O_O) ... ok
test_exp2_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp2_d_d) ... ok
test_exp2_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp2_e_e) ... ok
test_exp2_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp2_f_f) ... ok
test_exp2_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp2_g_g) ... ok
test_exp_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp_D_D) ... ok
test_exp_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp_F_F) ... ok
test_exp_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp_G_G) ... ok
test_exp_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp_O_O) ... ok
test_exp_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp_d_d) ... ok
test_exp_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp_e_e) ... ok
test_exp_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp_f_f) ... ok
test_exp_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_exp_g_g) ... ok
test_expm1_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_expm1_D_D) ... ok
test_expm1_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_expm1_F_F) ... ok
test_expm1_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_expm1_G_G) ... ok
test_expm1_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_expm1_O_O) ... ok
test_expm1_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_expm1_d_d) ... ok
test_expm1_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_expm1_e_e) ... ok
test_expm1_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_expm1_f_f) ... ok
test_expm1_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_expm1_g_g) ... ok
test_fabs_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fabs_O_O) ... ok
test_fabs_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fabs_d_d) ... ok
test_fabs_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fabs_e_e) ... ok
test_fabs_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fabs_f_f) ... ok
test_fabs_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fabs_g_g) ... ok
test_float_power_DD_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_float_power_DD_D) ... ok
test_float_power_GG_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_float_power_GG_G) ... ok
test_float_power_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_float_power_dd_d) ... ok
test_float_power_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_float_power_gg_g) ... ok
test_floor_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_O_O) ... ok
test_floor_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_d_d) ... ok
test_floor_divide_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_BB_B) ... ok
test_floor_divide_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_HH_H) ... ok
test_floor_divide_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_II_I) ... ok
test_floor_divide_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_LL_L) ... ok
test_floor_divide_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_OO_O) ... ok
test_floor_divide_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_QQ_Q) ... ok
test_floor_divide_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_bb_b) ... ok
test_floor_divide_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_dd_d) ... ok
test_floor_divide_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_ee_e) ... ok
test_floor_divide_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_ff_f) ... ok
test_floor_divide_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_gg_g) ... ok
test_floor_divide_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_hh_h) ... ok
test_floor_divide_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_ii_i) ... ok
test_floor_divide_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_ll_l) ... ok
test_floor_divide_md_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_md_m) ... ok
test_floor_divide_mm_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_mm_q) ... ok
test_floor_divide_mq_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_mq_m) ... ok
test_floor_divide_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_divide_qq_q) ... ok
test_floor_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_e_e) ... ok
test_floor_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_f_f) ... ok
test_floor_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_floor_g_g) ... ok
test_fmax_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_??_?) ... ok
test_fmax_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_BB_B) ... ok
test_fmax_DD_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_DD_D) ... ok
test_fmax_FF_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_FF_F) ... ok
test_fmax_GG_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_GG_G) ... ok
test_fmax_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_HH_H) ... ok
test_fmax_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_II_I) ... ok
test_fmax_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_LL_L) ... ok
test_fmax_MM_M (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_MM_M) ... ok
test_fmax_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_OO_O) ... ok
test_fmax_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_QQ_Q) ... ok
test_fmax_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_bb_b) ... ok
test_fmax_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_dd_d) ... ok
test_fmax_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_ee_e) ... ok
test_fmax_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_ff_f) ... ok
test_fmax_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_gg_g) ... ok
test_fmax_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_hh_h) ... ok
test_fmax_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_ii_i) ... ok
test_fmax_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_ll_l) ... ok
test_fmax_mm_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_mm_m) ... ok
test_fmax_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmax_qq_q) ... ok
test_fmin_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_??_?) ... ok
test_fmin_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_BB_B) ... ok
test_fmin_DD_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_DD_D) ... ok
test_fmin_FF_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_FF_F) ... ok
test_fmin_GG_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_GG_G) ... ok
test_fmin_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_HH_H) ... ok
test_fmin_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_II_I) ... ok
test_fmin_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_LL_L) ... ok
test_fmin_MM_M (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_MM_M) ... ok
test_fmin_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_OO_O) ... ok
test_fmin_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_QQ_Q) ... ok
test_fmin_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_bb_b) ... ok
test_fmin_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_dd_d) ... ok
test_fmin_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_ee_e) ... ok
test_fmin_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_ff_f) ... ok
test_fmin_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_gg_g) ... ok
test_fmin_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_hh_h) ... ok
test_fmin_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_ii_i) ... ok
test_fmin_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_ll_l) ... ok
test_fmin_mm_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_mm_m) ... ok
test_fmin_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmin_qq_q) ... ok
test_fmod_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_BB_B) ... ok
test_fmod_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_HH_H) ... ok
test_fmod_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_II_I) ... ok
test_fmod_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_LL_L) ... ok
test_fmod_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_OO_O) ... ok
test_fmod_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_QQ_Q) ... ok
test_fmod_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_bb_b) ... ok
test_fmod_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_dd_d) ... ok
test_fmod_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_ee_e) ... ok
test_fmod_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_ff_f) ... ok
test_fmod_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_gg_g) ... ok
test_fmod_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_hh_h) ... ok
test_fmod_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_ii_i) ... ok
test_fmod_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_ll_l) ... ok
test_fmod_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_fmod_qq_q) ... ok
test_gcd_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_gcd_BB_B) ... ok
test_gcd_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_gcd_HH_H) ... ok
test_gcd_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_gcd_II_I) ... ok
test_gcd_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_gcd_LL_L) ... ok
test_gcd_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_gcd_OO_O) ... ok
test_gcd_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_gcd_QQ_Q) ... ok
test_gcd_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_gcd_bb_b) ... ok
test_gcd_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_gcd_hh_h) ... ok
test_gcd_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_gcd_ii_i) ... ok
test_gcd_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_gcd_ll_l) ... ok
test_gcd_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_gcd_qq_q) ... ok
test_greater_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_??_?) ... ok
test_greater_BB_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_BB_?) ... ok
test_greater_DD_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_DD_?) ... ok
test_greater_FF_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_FF_?) ... ok
test_greater_GG_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_GG_?) ... ok
test_greater_HH_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_HH_?) ... ok
test_greater_II_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_II_?) ... ok
test_greater_LL_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_LL_?) ... ok
test_greater_MM_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_MM_?) ... ok
test_greater_OO_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_OO_?) ... ok
test_greater_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_OO_O) ... ok
test_greater_QQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_QQ_?) ... ok
test_greater_Qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_Qq_?) ... ok
test_greater_bb_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_bb_?) ... ok
test_greater_dd_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_dd_?) ... ok
test_greater_ee_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_ee_?) ... ok
test_greater_equal_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_??_?) ... ok
test_greater_equal_BB_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_BB_?) ... ok
test_greater_equal_DD_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_DD_?) ... ok
test_greater_equal_FF_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_FF_?) ... ok
test_greater_equal_GG_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_GG_?) ... ok
test_greater_equal_HH_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_HH_?) ... ok
test_greater_equal_II_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_II_?) ... ok
test_greater_equal_LL_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_LL_?) ... ok
test_greater_equal_MM_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_MM_?) ... ok
test_greater_equal_OO_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_OO_?) ... ok
test_greater_equal_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_OO_O) ... ok
test_greater_equal_QQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_QQ_?) ... ok
test_greater_equal_Qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_Qq_?) ... ok
test_greater_equal_bb_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_bb_?) ... ok
test_greater_equal_dd_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_dd_?) ... ok
test_greater_equal_ee_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_ee_?) ... ok
test_greater_equal_ff_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_ff_?) ... ok
test_greater_equal_gg_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_gg_?) ... ok
test_greater_equal_hh_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_hh_?) ... ok
test_greater_equal_ii_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_ii_?) ... ok
test_greater_equal_ll_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_ll_?) ... ok
test_greater_equal_mm_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_mm_?) ... ok
test_greater_equal_qQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_qQ_?) ... ok
test_greater_equal_qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_equal_qq_?) ... ok
test_greater_ff_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_ff_?) ... ok
test_greater_gg_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_gg_?) ... ok
test_greater_hh_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_hh_?) ... ok
test_greater_ii_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_ii_?) ... ok
test_greater_ll_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_ll_?) ... ok
test_greater_mm_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_mm_?) ... ok
test_greater_qQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_qQ_?) ... ok
test_greater_qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_greater_qq_?) ... ok
test_hypot_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_hypot_OO_O) ... ok
test_hypot_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_hypot_dd_d) ... ok
test_hypot_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_hypot_ee_e) ... ok
test_hypot_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_hypot_ff_f) ... ok
test_hypot_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_hypot_gg_g) ... ok
test_invert_?_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_?_?) ... ok
test_invert_B_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_B_B) ... ok
test_invert_H_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_H_H) ... ok
test_invert_I_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_I_I) ... ok
test_invert_L_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_L_L) ... ok
test_invert_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_O_O) ... ok
test_invert_Q_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_Q_Q) ... ok
test_invert_b_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_b_b) ... ok
test_invert_h_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_h_h) ... ok
test_invert_i_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_i_i) ... ok
test_invert_l_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_l_l) ... ok
test_invert_q_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_invert_q_q) ... ok
test_isfinite_?_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_?_?) ... ok
test_isfinite_B_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_B_?) ... ok
test_isfinite_D_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_D_?) ... ok
test_isfinite_F_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_F_?) ... ok
test_isfinite_G_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_G_?) ... ok
test_isfinite_H_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_H_?) ... ok
test_isfinite_I_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_I_?) ... ok
test_isfinite_L_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_L_?) ... ok
test_isfinite_M_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_M_?) ... ok
test_isfinite_Q_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_Q_?) ... ok
test_isfinite_b_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_b_?) ... ok
test_isfinite_d_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_d_?) ... ok
test_isfinite_e_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_e_?) ... ok
test_isfinite_f_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_f_?) ... ok
test_isfinite_g_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_g_?) ... ok
test_isfinite_h_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_h_?) ... ok
test_isfinite_i_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_i_?) ... ok
test_isfinite_l_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_l_?) ... ok
test_isfinite_m_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_m_?) ... ok
test_isfinite_q_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isfinite_q_?) ... ok
test_isinf_?_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_?_?) ... ok
test_isinf_B_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_B_?) ... ok
test_isinf_D_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_D_?) ... ok
test_isinf_F_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_F_?) ... ok
test_isinf_G_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_G_?) ... ok
test_isinf_H_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_H_?) ... ok
test_isinf_I_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_I_?) ... ok
test_isinf_L_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_L_?) ... ok
test_isinf_M_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_M_?) ... ok
test_isinf_Q_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_Q_?) ... ok
test_isinf_b_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_b_?) ... ok
test_isinf_d_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_d_?) ... ok
test_isinf_e_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_e_?) ... ok
test_isinf_f_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_f_?) ... ok
test_isinf_g_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_g_?) ... ok
test_isinf_h_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_h_?) ... ok
test_isinf_i_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_i_?) ... ok
test_isinf_l_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_l_?) ... ok
test_isinf_m_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_m_?) ... ok
test_isinf_q_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isinf_q_?) ... ok
test_isnan_?_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_?_?) ... ok
test_isnan_B_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_B_?) ... ok
test_isnan_D_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_D_?) ... ok
test_isnan_F_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_F_?) ... ok
test_isnan_G_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_G_?) ... ok
test_isnan_H_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_H_?) ... ok
test_isnan_I_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_I_?) ... ok
test_isnan_L_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_L_?) ... ok
test_isnan_M_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_M_?) ... ok
test_isnan_Q_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_Q_?) ... ok
test_isnan_b_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_b_?) ... ok
test_isnan_d_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_d_?) ... ok
test_isnan_e_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_e_?) ... ok
test_isnan_f_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_f_?) ... ok
test_isnan_g_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_g_?) ... ok
test_isnan_h_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_h_?) ... ok
test_isnan_i_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_i_?) ... ok
test_isnan_l_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_l_?) ... ok
test_isnan_m_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_m_?) ... ok
test_isnan_q_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnan_q_?) ... ok
test_isnat_M_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnat_M_?) ... ok
test_isnat_m_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_isnat_m_?) ... ok
test_lcm_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_lcm_BB_B) ... ok
test_lcm_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_lcm_HH_H) ... ok
test_lcm_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_lcm_II_I) ... ok
test_lcm_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_lcm_LL_L) ... ok
test_lcm_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_lcm_OO_O) ... ok
test_lcm_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_lcm_QQ_Q) ... ok
test_lcm_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_lcm_bb_b) ... ok
test_lcm_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_lcm_hh_h) ... ok
test_lcm_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_lcm_ii_i) ... ok
test_lcm_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_lcm_ll_l) ... ok
test_lcm_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_lcm_qq_q) ... ok
test_ldexp_di_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ldexp_di_d) ... ok
test_ldexp_dl_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ldexp_dl_d) ... ok
test_ldexp_ei_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ldexp_ei_e) ... ok
test_ldexp_el_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ldexp_el_e) ... ok
test_ldexp_fi_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ldexp_fi_f) ... ok
test_ldexp_fl_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ldexp_fl_f) ... ok
test_ldexp_gi_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ldexp_gi_g) ... ok
test_ldexp_gl_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_ldexp_gl_g) ... ok
test_left_shift_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_left_shift_BB_B) ... ok
test_left_shift_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_left_shift_HH_H) ... ok
test_left_shift_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_left_shift_II_I) ... ok
test_left_shift_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_left_shift_LL_L) ... ok
test_left_shift_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_left_shift_OO_O) ... ok
test_left_shift_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_left_shift_QQ_Q) ... ok
test_left_shift_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_left_shift_bb_b) ... ok
test_left_shift_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_left_shift_hh_h) ... ok
test_left_shift_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_left_shift_ii_i) ... ok
test_left_shift_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_left_shift_ll_l) ... ok
test_left_shift_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_left_shift_qq_q) ... ok
test_less_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_??_?) ... ok
test_less_BB_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_BB_?) ... ok
test_less_DD_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_DD_?) ... ok
test_less_FF_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_FF_?) ... ok
test_less_GG_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_GG_?) ... ok
test_less_HH_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_HH_?) ... ok
test_less_II_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_II_?) ... ok
test_less_LL_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_LL_?) ... ok
test_less_MM_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_MM_?) ... ok
test_less_OO_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_OO_?) ... ok
test_less_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_OO_O) ... ok
test_less_QQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_QQ_?) ... ok
test_less_Qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_Qq_?) ... ok
test_less_bb_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_bb_?) ... ok
test_less_dd_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_dd_?) ... ok
test_less_ee_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_ee_?) ... ok
test_less_equal_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_??_?) ... ok
test_less_equal_BB_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_BB_?) ... ok
test_less_equal_DD_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_DD_?) ... ok
test_less_equal_FF_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_FF_?) ... ok
test_less_equal_GG_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_GG_?) ... ok
test_less_equal_HH_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_HH_?) ... ok
test_less_equal_II_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_II_?) ... ok
test_less_equal_LL_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_LL_?) ... ok
test_less_equal_MM_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_MM_?) ... ok
test_less_equal_OO_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_OO_?) ... ok
test_less_equal_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_OO_O) ... ok
test_less_equal_QQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_QQ_?) ... ok
test_less_equal_Qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_Qq_?) ... ok
test_less_equal_bb_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_bb_?) ... ok
test_less_equal_dd_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_dd_?) ... ok
test_less_equal_ee_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_ee_?) ... ok
test_less_equal_ff_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_ff_?) ... ok
test_less_equal_gg_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_gg_?) ... ok
test_less_equal_hh_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_hh_?) ... ok
test_less_equal_ii_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_ii_?) ... ok
test_less_equal_ll_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_ll_?) ... ok
test_less_equal_mm_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_mm_?) ... ok
test_less_equal_qQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_qQ_?) ... ok
test_less_equal_qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_equal_qq_?) ... ok
test_less_ff_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_ff_?) ... ok
test_less_gg_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_gg_?) ... ok
test_less_hh_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_hh_?) ... ok
test_less_ii_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_ii_?) ... ok
test_less_ll_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_ll_?) ... ok
test_less_mm_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_mm_?) ... ok
test_less_qQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_qQ_?) ... ok
test_less_qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_less_qq_?) ... ok
test_log10_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log10_D_D) ... ok
test_log10_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log10_F_F) ... ok
test_log10_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log10_G_G) ... ok
test_log10_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log10_O_O) ... ok
test_log10_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log10_d_d) ... ok
test_log10_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log10_e_e) ... ok
test_log10_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log10_f_f) ... ok
test_log10_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log10_g_g) ... ok
test_log1p_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log1p_D_D) ... ok
test_log1p_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log1p_F_F) ... ok
test_log1p_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log1p_G_G) ... ok
test_log1p_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log1p_O_O) ... ok
test_log1p_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log1p_d_d) ... ok
test_log1p_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log1p_e_e) ... ok
test_log1p_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log1p_f_f) ... ok
test_log1p_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log1p_g_g) ... ok
test_log2_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log2_D_D) ... ok
test_log2_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log2_F_F) ... ok
test_log2_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log2_G_G) ... ok
test_log2_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log2_O_O) ... ok
test_log2_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log2_d_d) ... ok
test_log2_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log2_e_e) ... ok
test_log2_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log2_f_f) ... ok
test_log2_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log2_g_g) ... ok
test_log_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log_D_D) ... ok
test_log_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log_F_F) ... ok
test_log_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log_G_G) ... ok
test_log_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log_O_O) ... ok
test_log_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log_d_d) ... ok
test_log_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log_e_e) ... ok
test_log_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log_f_f) ... ok
test_log_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_log_g_g) ... ok
test_logaddexp2_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logaddexp2_dd_d) ... ok
test_logaddexp2_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logaddexp2_ee_e) ... ok
test_logaddexp2_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logaddexp2_ff_f) ... ok
test_logaddexp2_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logaddexp2_gg_g) ... ok
test_logaddexp_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logaddexp_dd_d) ... ok
test_logaddexp_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logaddexp_ee_e) ... ok
test_logaddexp_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logaddexp_ff_f) ... ok
test_logaddexp_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logaddexp_gg_g) ... ok
test_logical_and_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_??_?) ... ok
test_logical_and_BB_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_BB_?) ... ok
test_logical_and_DD_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_DD_?) ... ok
test_logical_and_FF_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_FF_?) ... ok
test_logical_and_GG_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_GG_?) ... ok
test_logical_and_HH_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_HH_?) ... ok
test_logical_and_II_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_II_?) ... ok
test_logical_and_LL_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_LL_?) ... ok
test_logical_and_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_OO_O) ... ok
test_logical_and_QQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_QQ_?) ... ok
test_logical_and_bb_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_bb_?) ... ok
test_logical_and_dd_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_dd_?) ... ok
test_logical_and_ee_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_ee_?) ... ok
test_logical_and_ff_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_ff_?) ... ok
test_logical_and_gg_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_gg_?) ... ok
test_logical_and_hh_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_hh_?) ... ok
test_logical_and_ii_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_ii_?) ... ok
test_logical_and_ll_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_ll_?) ... ok
test_logical_and_qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_and_qq_?) ... ok
test_logical_not_?_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_?_?) ... ok
test_logical_not_B_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_B_?) ... ok
test_logical_not_D_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_D_?) ... ok
test_logical_not_F_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_F_?) ... ok
test_logical_not_G_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_G_?) ... ok
test_logical_not_H_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_H_?) ... ok
test_logical_not_I_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_I_?) ... ok
test_logical_not_L_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_L_?) ... ok
test_logical_not_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_O_O) ... ok
test_logical_not_Q_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_Q_?) ... ok
test_logical_not_b_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_b_?) ... ok
test_logical_not_d_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_d_?) ... ok
test_logical_not_e_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_e_?) ... ok
test_logical_not_f_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_f_?) ... ok
test_logical_not_g_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_g_?) ... ok
test_logical_not_h_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_h_?) ... ok
test_logical_not_i_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_i_?) ... ok
test_logical_not_l_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_l_?) ... ok
test_logical_not_q_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_not_q_?) ... ok
test_logical_or_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_??_?) ... ok
test_logical_or_BB_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_BB_?) ... ok
test_logical_or_DD_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_DD_?) ... ok
test_logical_or_FF_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_FF_?) ... ok
test_logical_or_GG_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_GG_?) ... ok
test_logical_or_HH_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_HH_?) ... ok
test_logical_or_II_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_II_?) ... ok
test_logical_or_LL_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_LL_?) ... ok
test_logical_or_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_OO_O) ... ok
test_logical_or_QQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_QQ_?) ... ok
test_logical_or_bb_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_bb_?) ... ok
test_logical_or_dd_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_dd_?) ... ok
test_logical_or_ee_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_ee_?) ... ok
test_logical_or_ff_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_ff_?) ... ok
test_logical_or_gg_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_gg_?) ... ok
test_logical_or_hh_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_hh_?) ... ok
test_logical_or_ii_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_ii_?) ... ok
test_logical_or_ll_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_ll_?) ... ok
test_logical_or_qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_or_qq_?) ... ok
test_logical_xor_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_??_?) ... ok
test_logical_xor_BB_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_BB_?) ... ok
test_logical_xor_DD_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_DD_?) ... ok
test_logical_xor_FF_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_FF_?) ... ok
test_logical_xor_GG_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_GG_?) ... ok
test_logical_xor_HH_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_HH_?) ... ok
test_logical_xor_II_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_II_?) ... ok
test_logical_xor_LL_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_LL_?) ... ok
test_logical_xor_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_OO_O) ... ok
test_logical_xor_QQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_QQ_?) ... ok
test_logical_xor_bb_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_bb_?) ... ok
test_logical_xor_dd_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_dd_?) ... ok
test_logical_xor_ee_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_ee_?) ... ok
test_logical_xor_ff_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_ff_?) ... ok
test_logical_xor_gg_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_gg_?) ... ok
test_logical_xor_hh_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_hh_?) ... ok
test_logical_xor_ii_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_ii_?) ... ok
test_logical_xor_ll_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_ll_?) ... ok
test_logical_xor_qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_logical_xor_qq_?) ... ok
test_maximum_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_??_?) ... ok
test_maximum_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_BB_B) ... ok
test_maximum_DD_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_DD_D) ... ok
test_maximum_FF_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_FF_F) ... ok
test_maximum_GG_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_GG_G) ... ok
test_maximum_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_HH_H) ... ok
test_maximum_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_II_I) ... ok
test_maximum_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_LL_L) ... ok
test_maximum_MM_M (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_MM_M) ... ok
test_maximum_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_OO_O) ... ok
test_maximum_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_QQ_Q) ... ok
test_maximum_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_bb_b) ... ok
test_maximum_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_dd_d) ... ok
test_maximum_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_ee_e) ... ok
test_maximum_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_ff_f) ... ok
test_maximum_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_gg_g) ... ok
test_maximum_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_hh_h) ... ok
test_maximum_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_ii_i) ... ok
test_maximum_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_ll_l) ... ok
test_maximum_mm_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_mm_m) ... ok
test_maximum_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_maximum_qq_q) ... ok
test_minimum_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_??_?) ... ok
test_minimum_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_BB_B) ... ok
test_minimum_DD_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_DD_D) ... ok
test_minimum_FF_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_FF_F) ... ok
test_minimum_GG_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_GG_G) ... ok
test_minimum_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_HH_H) ... ok
test_minimum_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_II_I) ... ok
test_minimum_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_LL_L) ... ok
test_minimum_MM_M (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_MM_M) ... ok
test_minimum_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_OO_O) ... ok
test_minimum_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_QQ_Q) ... ok
test_minimum_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_bb_b) ... ok
test_minimum_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_dd_d) ... ok
test_minimum_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_ee_e) ... ok
test_minimum_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_ff_f) ... ok
test_minimum_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_gg_g) ... ok
test_minimum_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_hh_h) ... ok
test_minimum_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_ii_i) ... ok
test_minimum_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_ll_l) ... ok
test_minimum_mm_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_mm_m) ... ok
test_minimum_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_minimum_qq_q) ... ok
test_multiply_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_??_?) ... ok
test_multiply_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_BB_B) ... ok
test_multiply_DD_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_DD_D) ... ok
test_multiply_FF_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_FF_F) ... ok
test_multiply_GG_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_GG_G) ... ok
test_multiply_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_HH_H) ... ok
test_multiply_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_II_I) ... ok
test_multiply_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_LL_L) ... ok
test_multiply_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_OO_O) ... ok
test_multiply_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_QQ_Q) ... ok
test_multiply_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_bb_b) ... ok
test_multiply_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_dd_d) ... ok
test_multiply_dm_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_dm_m) ... ok
test_multiply_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_ee_e) ... ok
test_multiply_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_ff_f) ... ok
test_multiply_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_gg_g) ... ok
test_multiply_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_hh_h) ... ok
test_multiply_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_ii_i) ... ok
test_multiply_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_ll_l) ... ok
test_multiply_md_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_md_m) ... ok
test_multiply_mq_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_mq_m) ... ok
test_multiply_qm_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_qm_m) ... ok
test_multiply_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_multiply_qq_q) ... ok
test_negative_B_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_B_B) ... ok
test_negative_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_D_D) ... ok
test_negative_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_F_F) ... ok
test_negative_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_G_G) ... ok
test_negative_H_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_H_H) ... ok
test_negative_I_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_I_I) ... ok
test_negative_L_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_L_L) ... ok
test_negative_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_O_O) ... ok
test_negative_Q_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_Q_Q) ... ok
test_negative_b_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_b_b) ... ok
test_negative_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_d_d) ... ok
test_negative_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_e_e) ... ok
test_negative_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_f_f) ... ok
test_negative_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_g_g) ... ok
test_negative_h_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_h_h) ... ok
test_negative_i_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_i_i) ... ok
test_negative_l_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_l_l) ... ok
test_negative_m_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_m_m) ... ok
test_negative_q_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_negative_q_q) ... ok
test_nextafter_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_nextafter_dd_d) ... ok
test_nextafter_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_nextafter_ee_e) ... ok
test_nextafter_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_nextafter_ff_f) ... ok
test_nextafter_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_nextafter_gg_g) ... ok
test_not_equal_??_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_??_?) ... ok
test_not_equal_BB_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_BB_?) ... ok
test_not_equal_DD_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_DD_?) ... ok
test_not_equal_FF_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_FF_?) ... ok
test_not_equal_GG_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_GG_?) ... ok
test_not_equal_HH_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_HH_?) ... ok
test_not_equal_II_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_II_?) ... ok
test_not_equal_LL_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_LL_?) ... ok
test_not_equal_MM_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_MM_?) ... ok
test_not_equal_OO_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_OO_?) ... ok
test_not_equal_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_OO_O) ... ok
test_not_equal_QQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_QQ_?) ... ok
test_not_equal_Qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_Qq_?) ... ok
test_not_equal_bb_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_bb_?) ... ok
test_not_equal_dd_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_dd_?) ... ok
test_not_equal_ee_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_ee_?) ... ok
test_not_equal_ff_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_ff_?) ... ok
test_not_equal_gg_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_gg_?) ... ok
test_not_equal_hh_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_hh_?) ... ok
test_not_equal_ii_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_ii_?) ... ok
test_not_equal_ll_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_ll_?) ... ok
test_not_equal_mm_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_mm_?) ... ok
test_not_equal_qQ_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_qQ_?) ... ok
test_not_equal_qq_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_not_equal_qq_?) ... ok
test_positive_B_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_B_B) ... ok
test_positive_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_D_D) ... ok
test_positive_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_F_F) ... ok
test_positive_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_G_G) ... ok
test_positive_H_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_H_H) ... ok
test_positive_I_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_I_I) ... ok
test_positive_L_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_L_L) ... ok
test_positive_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_O_O) ... ok
test_positive_Q_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_Q_Q) ... ok
test_positive_b_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_b_b) ... ok
test_positive_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_d_d) ... ok
test_positive_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_e_e) ... ok
test_positive_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_f_f) ... ok
test_positive_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_g_g) ... ok
test_positive_h_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_h_h) ... ok
test_positive_i_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_i_i) ... ok
test_positive_l_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_l_l) ... ok
test_positive_m_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_m_m) ... ok
test_positive_q_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_positive_q_q) ... ok
test_power_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_BB_B) ... ok
test_power_DD_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_DD_D) ... ok
test_power_FF_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_FF_F) ... ok
test_power_GG_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_GG_G) ... ok
test_power_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_HH_H) ... ok
test_power_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_II_I) ... ok
test_power_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_LL_L) ... ok
test_power_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_OO_O) ... ok
test_power_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_QQ_Q) ... ok
test_power_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_bb_b) ... ok
test_power_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_dd_d) ... ok
test_power_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_ee_e) ... ok
test_power_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_ff_f) ... ok
test_power_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_gg_g) ... ok
test_power_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_hh_h) ... ok
test_power_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_ii_i) ... ok
test_power_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_ll_l) ... ok
test_power_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_power_qq_q) ... ok
test_rad2deg_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rad2deg_O_O) ... ok
test_rad2deg_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rad2deg_d_d) ... ok
test_rad2deg_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rad2deg_e_e) ... ok
test_rad2deg_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rad2deg_f_f) ... ok
test_rad2deg_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rad2deg_g_g) ... ok
test_radians_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_radians_O_O) ... ok
test_radians_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_radians_d_d) ... ok
test_radians_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_radians_e_e) ... ok
test_radians_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_radians_f_f) ... ok
test_radians_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_radians_g_g) ... ok
test_reciprocal_B_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_B_B) ... ok
test_reciprocal_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_D_D) ... ok
test_reciprocal_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_F_F) ... ok
test_reciprocal_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_G_G) ... ok
test_reciprocal_H_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_H_H) ... ok
test_reciprocal_I_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_I_I) ... ok
test_reciprocal_L_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_L_L) ... ok
test_reciprocal_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_O_O) ... ok
test_reciprocal_Q_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_Q_Q) ... ok
test_reciprocal_b_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_b_b) ... ok
test_reciprocal_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_d_d) ... ok
test_reciprocal_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_e_e) ... ok
test_reciprocal_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_f_f) ... ok
test_reciprocal_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_g_g) ... ok
test_reciprocal_h_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_h_h) ... ok
test_reciprocal_i_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_i_i) ... ok
test_reciprocal_l_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_l_l) ... ok
test_reciprocal_q_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_reciprocal_q_q) ... ok
test_remainder_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_BB_B) ... ok
test_remainder_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_HH_H) ... ok
test_remainder_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_II_I) ... ok
test_remainder_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_LL_L) ... ok
test_remainder_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_OO_O) ... ok
test_remainder_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_QQ_Q) ... ok
test_remainder_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_bb_b) ... ok
test_remainder_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_dd_d) ... ok
test_remainder_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_ee_e) ... ok
test_remainder_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_ff_f) ... ok
test_remainder_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_gg_g) ... ok
test_remainder_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_hh_h) ... ok
test_remainder_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_ii_i) ... ok
test_remainder_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_ll_l) ... ok
test_remainder_mm_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_mm_m) ... ok
test_remainder_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_remainder_qq_q) ... ok
test_right_shift_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_right_shift_BB_B) ... ok
test_right_shift_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_right_shift_HH_H) ... ok
test_right_shift_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_right_shift_II_I) ... ok
test_right_shift_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_right_shift_LL_L) ... ok
test_right_shift_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_right_shift_OO_O) ... ok
test_right_shift_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_right_shift_QQ_Q) ... ok
test_right_shift_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_right_shift_bb_b) ... ok
test_right_shift_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_right_shift_hh_h) ... ok
test_right_shift_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_right_shift_ii_i) ... ok
test_right_shift_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_right_shift_ll_l) ... ok
test_right_shift_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_right_shift_qq_q) ... ok
test_rint_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rint_D_D) ... ok
test_rint_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rint_F_F) ... ok
test_rint_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rint_G_G) ... ok
test_rint_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rint_O_O) ... ok
test_rint_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rint_d_d) ... ok
test_rint_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rint_e_e) ... ok
test_rint_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rint_f_f) ... ok
test_rint_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_rint_g_g) ... ok
test_sign_B_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_B_B) ... ok
test_sign_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_D_D) ... ok
test_sign_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_F_F) ... ok
test_sign_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_G_G) ... ok
test_sign_H_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_H_H) ... ok
test_sign_I_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_I_I) ... ok
test_sign_L_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_L_L) ... ok
test_sign_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_O_O) ... ok
test_sign_Q_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_Q_Q) ... ok
test_sign_b_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_b_b) ... ok
test_sign_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_d_d) ... ok
test_sign_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_e_e) ... ok
test_sign_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_f_f) ... ok
test_sign_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_g_g) ... ok
test_sign_h_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_h_h) ... ok
test_sign_i_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_i_i) ... ok
test_sign_l_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_l_l) ... ok
test_sign_m_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_m_m) ... ok
test_sign_q_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sign_q_q) ... ok
test_signbit_d_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_signbit_d_?) ... ok
test_signbit_e_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_signbit_e_?) ... ok
test_signbit_f_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_signbit_f_?) ... ok
test_signbit_g_? (numba.tests.test_ufuncs.TestLoopTypesComplex.test_signbit_g_?) ... ok
test_sin_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sin_D_D) ... ok
test_sin_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sin_F_F) ... ok
test_sin_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sin_G_G) ... ok
test_sin_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sin_O_O) ... ok
test_sin_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sin_d_d) ... ok
test_sin_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sin_e_e) ... ok
test_sin_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sin_f_f) ... ok
test_sin_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sin_g_g) ... ok
test_sinh_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sinh_D_D) ... ok
test_sinh_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sinh_F_F) ... ok
test_sinh_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sinh_G_G) ... ok
test_sinh_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sinh_O_O) ... ok
test_sinh_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sinh_d_d) ... ok
test_sinh_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sinh_e_e) ... ok
test_sinh_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sinh_f_f) ... ok
test_sinh_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sinh_g_g) ... ok
test_spacing_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_spacing_d_d) ... ok
test_spacing_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_spacing_e_e) ... ok
test_spacing_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_spacing_f_f) ... ok
test_spacing_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_spacing_g_g) ... ok
test_sqrt_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sqrt_D_D) ... ok
test_sqrt_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sqrt_F_F) ... ok
test_sqrt_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sqrt_G_G) ... ok
test_sqrt_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sqrt_O_O) ... ok
test_sqrt_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sqrt_d_d) ... ok
test_sqrt_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sqrt_e_e) ... ok
test_sqrt_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sqrt_f_f) ... ok
test_sqrt_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_sqrt_g_g) ... ok
test_square_B_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_B_B) ... ok
test_square_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_D_D) ... ok
test_square_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_F_F) ... ok
test_square_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_G_G) ... ok
test_square_H_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_H_H) ... ok
test_square_I_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_I_I) ... ok
test_square_L_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_L_L) ... ok
test_square_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_O_O) ... ok
test_square_Q_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_Q_Q) ... ok
test_square_b_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_b_b) ... ok
test_square_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_d_d) ... ok
test_square_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_e_e) ... ok
test_square_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_f_f) ... ok
test_square_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_g_g) ... ok
test_square_h_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_h_h) ... ok
test_square_i_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_i_i) ... ok
test_square_l_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_l_l) ... ok
test_square_q_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_square_q_q) ... ok
test_subtract_BB_B (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_BB_B) ... ok
test_subtract_DD_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_DD_D) ... ok
test_subtract_FF_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_FF_F) ... ok
test_subtract_GG_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_GG_G) ... ok
test_subtract_HH_H (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_HH_H) ... ok
test_subtract_II_I (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_II_I) ... ok
test_subtract_LL_L (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_LL_L) ... ok
test_subtract_MM_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_MM_m) ... ok
test_subtract_Mm_M (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_Mm_M) ... ok
test_subtract_OO_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_OO_O) ... ok
test_subtract_QQ_Q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_QQ_Q) ... ok
test_subtract_bb_b (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_bb_b) ... ok
test_subtract_dd_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_dd_d) ... ok
test_subtract_ee_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_ee_e) ... ok
test_subtract_ff_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_ff_f) ... ok
test_subtract_gg_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_gg_g) ... ok
test_subtract_hh_h (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_hh_h) ... ok
test_subtract_ii_i (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_ii_i) ... ok
test_subtract_ll_l (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_ll_l) ... ok
test_subtract_mm_m (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_mm_m) ... ok
test_subtract_qq_q (numba.tests.test_ufuncs.TestLoopTypesComplex.test_subtract_qq_q) ... ok
test_tan_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tan_D_D) ... ok
test_tan_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tan_F_F) ... ok
test_tan_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tan_G_G) ... ok
test_tan_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tan_O_O) ... ok
test_tan_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tan_d_d) ... ok
test_tan_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tan_e_e) ... ok
test_tan_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tan_f_f) ... ok
test_tan_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tan_g_g) ... ok
test_tanh_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tanh_D_D) ... ok
test_tanh_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tanh_F_F) ... ok
test_tanh_G_G (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tanh_G_G) ... ok
test_tanh_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tanh_O_O) ... ok
test_tanh_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tanh_d_d) ... ok
test_tanh_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tanh_e_e) ... ok
test_tanh_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tanh_f_f) ... ok
test_tanh_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_tanh_g_g) ... ok
test_trunc_O_O (numba.tests.test_ufuncs.TestLoopTypesComplex.test_trunc_O_O) ... ok
test_trunc_d_d (numba.tests.test_ufuncs.TestLoopTypesComplex.test_trunc_d_d) ... ok
test_trunc_e_e (numba.tests.test_ufuncs.TestLoopTypesComplex.test_trunc_e_e) ... ok
test_trunc_f_f (numba.tests.test_ufuncs.TestLoopTypesComplex.test_trunc_f_f) ... ok
test_trunc_g_g (numba.tests.test_ufuncs.TestLoopTypesComplex.test_trunc_g_g) ... ok

======================================================================
ERROR: test_arctan_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan_D_D)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1513, in test_template
    self._check_loop(fn, ufunc, loop)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1459, in _check_loop
    self._check_ufunc_with_dtypes(fn, ufunc, letter_types)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1475, in _check_ufunc_with_dtypes
    cfunc = njit(arg_nbty)(fn)
            ^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/decorators.py", line 241, in wrapper
    disp.compile(sig)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
    cres = self._compiler.compile(args, return_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 125, in compile
    status, retval = self._compile_cached(args, return_type)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
    retval = self._compile_core(args, return_type)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
    cres = compiler.compile_extra(self.targetdescr.typing_context,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 466, in run_pass
    lower.lower()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 187, in lower
    self.lower_normal_function(self.fndesc)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 241, in lower_normal_function
    entry_block_tail = self.lower_function_body()
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 271, in lower_function_body
    self.lower_block(block)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 285, in lower_block
    self.lower_inst(inst)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 463, in lower_inst
    val = self.lower_assign(ty, inst)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 675, in lower_assign
    return self.lower_expr(ty, value)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1211, in lower_expr
    res = self.lower_call(resty, expr)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 940, in lower_call
    res = self._lower_call_normal(fnty, expr, signature)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1182, in _lower_call_normal
    res = impl(self.builder, argvals, self.loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1187, in __call__
    res = self._imp(self._context, builder, self._sig, args, loc=loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1217, in wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 498, in do_ufunc
    return numpy_ufunc_kernel(context, builder, sig, args, ufunc, kernel)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 407, in numpy_ufunc_kernel
    vals_out = _unpack_output_values(ufunc, builder, kernel.generate(*vals_in))
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 485, in generate
    res = self.fn(self.context, self.builder, isig, cast_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/cmathimpl.py", line 487, in atan_impl
    res = context.compile_internal(builder, atan_impl, sig, args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 878, in compile_internal
    cres = self.compile_subroutine(builder, impl, sig, locals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 863, in compile_subroutine
    cres = self._compile_subroutine_no_cache(builder, impl, sig,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 834, in _compile_subroutine_no_cache
    cres = compiler.compile_internal(self.typing_context, self,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 844, in compile_internal
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 466, in run_pass
    lower.lower()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 187, in lower
    self.lower_normal_function(self.fndesc)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 241, in lower_normal_function
    entry_block_tail = self.lower_function_body()
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 271, in lower_function_body
    self.lower_block(block)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 285, in lower_block
    self.lower_inst(inst)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 463, in lower_inst
    val = self.lower_assign(ty, inst)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 675, in lower_assign
    return self.lower_expr(ty, value)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1211, in lower_expr
    res = self.lower_call(resty, expr)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 940, in lower_call
    res = self._lower_call_normal(fnty, expr, signature)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1182, in _lower_call_normal
    res = impl(self.builder, argvals, self.loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1187, in __call__
    res = self._imp(self._context, builder, self._sig, args, loc=loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1217, in wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/cmathimpl.py", line 541, in atanh_impl
    res = context.compile_internal(builder, atanh_impl, sig, args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 878, in compile_internal
    cres = self.compile_subroutine(builder, impl, sig, locals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 863, in compile_subroutine
    cres = self._compile_subroutine_no_cache(builder, impl, sig,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 834, in _compile_subroutine_no_cache
    cres = compiler.compile_internal(self.typing_context, self,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 844, in compile_internal
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/untyped_passes.py", line 86, in run_pass
    func_ir = interp.interpret(bc)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/interpreter.py", line 1363, in interpret
    flow.run()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/byteflow.py", line 114, in run
    runner.dispatch(state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/byteflow.py", line 344, in dispatch
    raise UnsupportedError(msg, loc=self.get_debug_loc(inst.lineno))
numba.core.errors.UnsupportedError: Failed in nopython mode pipeline (step: native lowering)
Failed in nopython mode pipeline (step: native lowering)
Failed in nopython mode pipeline (step: analyzing bytecode)
Use of unsupported opcode (EXTENDED_ARG) found

File "numba/cpython/cmathimpl.py", line 517:
    def atanh_impl(z):
        <source elided>
                real = z.real/4./h/h
            imag = -math.copysign(PI_12, -z.imag)
            ^

During: lowering "r = call $14load_attr.2($90call.10, func=$14load_attr.2, args=[Var($90call.10, cmathimpl.py:480)], kws=(), vararg=None, varkwarg=None, target=None)" at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/cmathimpl.py (480)
During: lowering "$38call.5 = call $14load_attr.1(a0, a1, func=$14load_attr.1, args=[Var(a0, <string>:1), Var(a1, <string>:1)], kws=(), vararg=None, varkwarg=None, target=None)" at <string> (2)

======================================================================
ERROR: test_arctan_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctan_F_F)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1513, in test_template
    self._check_loop(fn, ufunc, loop)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1459, in _check_loop
    self._check_ufunc_with_dtypes(fn, ufunc, letter_types)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1475, in _check_ufunc_with_dtypes
    cfunc = njit(arg_nbty)(fn)
            ^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/decorators.py", line 241, in wrapper
    disp.compile(sig)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
    cres = self._compiler.compile(args, return_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 125, in compile
    status, retval = self._compile_cached(args, return_type)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
    retval = self._compile_core(args, return_type)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
    cres = compiler.compile_extra(self.targetdescr.typing_context,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 466, in run_pass
    lower.lower()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 187, in lower
    self.lower_normal_function(self.fndesc)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 241, in lower_normal_function
    entry_block_tail = self.lower_function_body()
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 271, in lower_function_body
    self.lower_block(block)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 285, in lower_block
    self.lower_inst(inst)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 463, in lower_inst
    val = self.lower_assign(ty, inst)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 675, in lower_assign
    return self.lower_expr(ty, value)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1211, in lower_expr
    res = self.lower_call(resty, expr)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 940, in lower_call
    res = self._lower_call_normal(fnty, expr, signature)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1182, in _lower_call_normal
    res = impl(self.builder, argvals, self.loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1187, in __call__
    res = self._imp(self._context, builder, self._sig, args, loc=loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1217, in wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 498, in do_ufunc
    return numpy_ufunc_kernel(context, builder, sig, args, ufunc, kernel)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 407, in numpy_ufunc_kernel
    vals_out = _unpack_output_values(ufunc, builder, kernel.generate(*vals_in))
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 485, in generate
    res = self.fn(self.context, self.builder, isig, cast_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/cmathimpl.py", line 487, in atan_impl
    res = context.compile_internal(builder, atan_impl, sig, args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 878, in compile_internal
    cres = self.compile_subroutine(builder, impl, sig, locals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 863, in compile_subroutine
    cres = self._compile_subroutine_no_cache(builder, impl, sig,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 834, in _compile_subroutine_no_cache
    cres = compiler.compile_internal(self.typing_context, self,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 844, in compile_internal
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 466, in run_pass
    lower.lower()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 187, in lower
    self.lower_normal_function(self.fndesc)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 241, in lower_normal_function
    entry_block_tail = self.lower_function_body()
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 271, in lower_function_body
    self.lower_block(block)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 285, in lower_block
    self.lower_inst(inst)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 463, in lower_inst
    val = self.lower_assign(ty, inst)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 675, in lower_assign
    return self.lower_expr(ty, value)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1211, in lower_expr
    res = self.lower_call(resty, expr)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 940, in lower_call
    res = self._lower_call_normal(fnty, expr, signature)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1182, in _lower_call_normal
    res = impl(self.builder, argvals, self.loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1187, in __call__
    res = self._imp(self._context, builder, self._sig, args, loc=loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1217, in wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/cmathimpl.py", line 541, in atanh_impl
    res = context.compile_internal(builder, atanh_impl, sig, args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 878, in compile_internal
    cres = self.compile_subroutine(builder, impl, sig, locals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 863, in compile_subroutine
    cres = self._compile_subroutine_no_cache(builder, impl, sig,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 834, in _compile_subroutine_no_cache
    cres = compiler.compile_internal(self.typing_context, self,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 844, in compile_internal
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/untyped_passes.py", line 86, in run_pass
    func_ir = interp.interpret(bc)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/interpreter.py", line 1363, in interpret
    flow.run()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/byteflow.py", line 114, in run
    runner.dispatch(state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/byteflow.py", line 344, in dispatch
    raise UnsupportedError(msg, loc=self.get_debug_loc(inst.lineno))
numba.core.errors.UnsupportedError: Failed in nopython mode pipeline (step: native lowering)
Failed in nopython mode pipeline (step: native lowering)
Failed in nopython mode pipeline (step: analyzing bytecode)
Use of unsupported opcode (EXTENDED_ARG) found

File "numba/cpython/cmathimpl.py", line 517:
    def atanh_impl(z):
        <source elided>
                real = z.real/4./h/h
            imag = -math.copysign(PI_12, -z.imag)
            ^

During: lowering "r = call $14load_attr.2($90call.10, func=$14load_attr.2, args=[Var($90call.10, cmathimpl.py:480)], kws=(), vararg=None, varkwarg=None, target=None)" at /mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/cmathimpl.py (480)
During: lowering "$38call.5 = call $14load_attr.1(a0, a1, func=$14load_attr.1, args=[Var(a0, <string>:1), Var(a1, <string>:1)], kws=(), vararg=None, varkwarg=None, target=None)" at <string> (2)

======================================================================
ERROR: test_arctanh_D_D (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctanh_D_D)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1513, in test_template
    self._check_loop(fn, ufunc, loop)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1459, in _check_loop
    self._check_ufunc_with_dtypes(fn, ufunc, letter_types)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1475, in _check_ufunc_with_dtypes
    cfunc = njit(arg_nbty)(fn)
            ^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/decorators.py", line 241, in wrapper
    disp.compile(sig)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
    cres = self._compiler.compile(args, return_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 125, in compile
    status, retval = self._compile_cached(args, return_type)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
    retval = self._compile_core(args, return_type)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
    cres = compiler.compile_extra(self.targetdescr.typing_context,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 466, in run_pass
    lower.lower()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 187, in lower
    self.lower_normal_function(self.fndesc)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 241, in lower_normal_function
    entry_block_tail = self.lower_function_body()
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 271, in lower_function_body
    self.lower_block(block)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 285, in lower_block
    self.lower_inst(inst)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 463, in lower_inst
    val = self.lower_assign(ty, inst)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 675, in lower_assign
    return self.lower_expr(ty, value)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1211, in lower_expr
    res = self.lower_call(resty, expr)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 940, in lower_call
    res = self._lower_call_normal(fnty, expr, signature)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1182, in _lower_call_normal
    res = impl(self.builder, argvals, self.loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1187, in __call__
    res = self._imp(self._context, builder, self._sig, args, loc=loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1217, in wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 498, in do_ufunc
    return numpy_ufunc_kernel(context, builder, sig, args, ufunc, kernel)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 407, in numpy_ufunc_kernel
    vals_out = _unpack_output_values(ufunc, builder, kernel.generate(*vals_in))
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 485, in generate
    res = self.fn(self.context, self.builder, isig, cast_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/cmathimpl.py", line 541, in atanh_impl
    res = context.compile_internal(builder, atanh_impl, sig, args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 878, in compile_internal
    cres = self.compile_subroutine(builder, impl, sig, locals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 863, in compile_subroutine
    cres = self._compile_subroutine_no_cache(builder, impl, sig,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 834, in _compile_subroutine_no_cache
    cres = compiler.compile_internal(self.typing_context, self,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 844, in compile_internal
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/untyped_passes.py", line 86, in run_pass
    func_ir = interp.interpret(bc)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/interpreter.py", line 1363, in interpret
    flow.run()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/byteflow.py", line 114, in run
    runner.dispatch(state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/byteflow.py", line 344, in dispatch
    raise UnsupportedError(msg, loc=self.get_debug_loc(inst.lineno))
numba.core.errors.UnsupportedError: Failed in nopython mode pipeline (step: native lowering)
Failed in nopython mode pipeline (step: analyzing bytecode)
Use of unsupported opcode (EXTENDED_ARG) found

File "numba/cpython/cmathimpl.py", line 517:
    def atanh_impl(z):
        <source elided>
                real = z.real/4./h/h
            imag = -math.copysign(PI_12, -z.imag)
            ^

During: lowering "$38call.5 = call $14load_attr.1(a0, a1, func=$14load_attr.1, args=[Var(a0, <string>:1), Var(a1, <string>:1)], kws=(), vararg=None, varkwarg=None, target=None)" at <string> (2)

======================================================================
ERROR: test_arctanh_F_F (numba.tests.test_ufuncs.TestLoopTypesComplex.test_arctanh_F_F)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1513, in test_template
    self._check_loop(fn, ufunc, loop)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1459, in _check_loop
    self._check_ufunc_with_dtypes(fn, ufunc, letter_types)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/tests/test_ufuncs.py", line 1475, in _check_ufunc_with_dtypes
    cfunc = njit(arg_nbty)(fn)
            ^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/decorators.py", line 241, in wrapper
    disp.compile(sig)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 965, in compile
    cres = self._compiler.compile(args, return_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 125, in compile
    status, retval = self._compile_cached(args, return_type)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 139, in _compile_cached
    retval = self._compile_core(args, return_type)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/dispatcher.py", line 152, in _compile_core
    cres = compiler.compile_extra(self.targetdescr.typing_context,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 770, in compile_extra
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/typed_passes.py", line 466, in run_pass
    lower.lower()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 187, in lower
    self.lower_normal_function(self.fndesc)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 241, in lower_normal_function
    entry_block_tail = self.lower_function_body()
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 271, in lower_function_body
    self.lower_block(block)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 285, in lower_block
    self.lower_inst(inst)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 463, in lower_inst
    val = self.lower_assign(ty, inst)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 675, in lower_assign
    return self.lower_expr(ty, value)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1211, in lower_expr
    res = self.lower_call(resty, expr)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 940, in lower_call
    res = self._lower_call_normal(fnty, expr, signature)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/lowering.py", line 1182, in _lower_call_normal
    res = impl(self.builder, argvals, self.loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1187, in __call__
    res = self._imp(self._context, builder, self._sig, args, loc=loc)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 1217, in wrapper
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 498, in do_ufunc
    return numpy_ufunc_kernel(context, builder, sig, args, ufunc, kernel)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 407, in numpy_ufunc_kernel
    vals_out = _unpack_output_values(ufunc, builder, kernel.generate(*vals_in))
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/np/npyimpl.py", line 485, in generate
    res = self.fn(self.context, self.builder, isig, cast_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/cpython/cmathimpl.py", line 541, in atanh_impl
    res = context.compile_internal(builder, atanh_impl, sig, args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 878, in compile_internal
    cres = self.compile_subroutine(builder, impl, sig, locals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 863, in compile_subroutine
    cres = self._compile_subroutine_no_cache(builder, impl, sig,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/base.py", line 834, in _compile_subroutine_no_cache
    cres = compiler.compile_internal(self.typing_context, self,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 844, in compile_internal
    return pipeline.compile_extra(func)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 461, in compile_extra
    return self._compile_bytecode()
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 529, in _compile_bytecode
    return self._compile_core()
           ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 508, in _compile_core
    raise e
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler.py", line 495, in _compile_core
    pm.run(self.state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 368, in run
    raise patched_exception
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 356, in run
    self._runPass(idx, pass_inst, state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_lock.py", line 35, in _acquire_compile_lock
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 311, in _runPass
    mutated |= check(pss.run_pass, internal_state)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/compiler_machinery.py", line 273, in check
    mangled = func(compiler_state)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/untyped_passes.py", line 86, in run_pass
    func_ir = interp.interpret(bc)
              ^^^^^^^^^^^^^^^^^^^^
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/interpreter.py", line 1363, in interpret
    flow.run()
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/byteflow.py", line 114, in run
    runner.dispatch(state)
  File "/mnt/home/sklam/dev/numba-py312-workspace/numba/numba/core/byteflow.py", line 344, in dispatch
    raise UnsupportedError(msg, loc=self.get_debug_loc(inst.lineno))
numba.core.errors.UnsupportedError: Failed in nopython mode pipeline (step: native lowering)
Failed in nopython mode pipeline (step: analyzing bytecode)
Use of unsupported opcode (EXTENDED_ARG) found

File "numba/cpython/cmathimpl.py", line 517:
    def atanh_impl(z):
        <source elided>
                real = z.real/4./h/h
            imag = -math.copysign(PI_12, -z.imag)
            ^

During: lowering "$38call.5 = call $14load_attr.1(a0, a1, func=$14load_attr.1, args=[Var(a0, <string>:1), Var(a1, <string>:1)], kws=(), vararg=None, varkwarg=None, target=None)" at <string> (2)

----------------------------------------------------------------------
Ran 1007 tests in 30.626s

FAILED (errors=4)
